Note: Due to the large number of combinatorial samples,
Abacus combinatorics use an Iterator pattern to succesively and consistently
generate all combinatorial objects without storing all of them in memory at once






Abacus.Tensors
---
t = Abacus.Tensor(1,2,3)
t.total()
6
t.next()
[ 0, 0, 0 ]
t.hasNext()
true
t.next()
[ 0, 0, 1 ]
[ [ 0, 0, 0 ], 0, [ 0, 0, 0 ], [ 'a1', 'b1', 'c1' ] ]
[ [ 0, 0, 1 ], 1, [ 0, 0, 1 ], [ 'a1', 'b1', 'c2' ] ]
[ [ 0, 0, 2 ], 2, [ 0, 0, 2 ], [ 'a1', 'b1', 'c3' ] ]
[ [ 0, 1, 0 ], 3, [ 0, 1, 0 ], [ 'a1', 'b2', 'c1' ] ]
[ [ 0, 1, 1 ], 4, [ 0, 1, 1 ], [ 'a1', 'b2', 'c2' ] ]
[ [ 0, 1, 2 ], 5, [ 0, 1, 2 ], [ 'a1', 'b2', 'c3' ] ]
t.forward()
while (t.hasPrev()) echo(t.prev())
[ [ 0, 1, 2 ], 5 ]
[ [ 0, 1, 1 ], 4 ]
[ [ 0, 1, 0 ], 3 ]
[ [ 0, 0, 2 ], 2 ]
[ [ 0, 0, 1 ], 1 ]
[ [ 0, 0, 0 ], 0 ]
t.random()
[ 0, 0, 1 ]
get tensors in unique random order
t.randomise()
while(t.hasRandomNext()) echo(t.randomNext())
[ 0, 1, 0 ]
[ 0, 0, 1 ]
[ 0, 0, 2 ]
[ 0, 0, 0 ]
[ 0, 1, 1 ]
[ 0, 1, 2 ]
t.dispose()
t = Abacus.Tensor(1,2,3)
get just last 3 tensors
t.range(-3,-1)
[ [ 0, 1, 0 ], [ 0, 1, 1 ], [ 0, 1, 2 ] ]
get just last 3 tensors in reverse order
t.range(-1,-3)
[ [ 0, 1, 2 ], [ 0, 1, 1 ], [ 0, 1, 0 ] ]

Abacus.Tensor.product(['a1'],['b1','b2'],['c1','c2','c3'])
[ [ 'a1', 'b1', 'c1' ],
  [ 'a1', 'b1', 'c2' ],
  [ 'a1', 'b1', 'c3' ],
  [ 'a1', 'b2', 'c1' ],
  [ 'a1', 'b2', 'c2' ],
  [ 'a1', 'b2', 'c3' ] ]
Abacus.Tensor.product(Abacus.Tensor.product(['a1'],['b1','b2']),['c1','c2','c3'])
[ [ 'a1', 'b1', 'c1' ],
  [ 'a1', 'b1', 'c2' ],
  [ 'a1', 'b1', 'c3' ],
  [ 'a1', 'b2', 'c1' ],
  [ 'a1', 'b2', 'c2' ],
  [ 'a1', 'b2', 'c3' ] ]
Abacus.Tensor.product(['a1'],Abacus.Tensor.product(['b1','b2'],['c1','c2','c3']))
[ [ 'a1', 'b1', 'c1' ],
  [ 'a1', 'b1', 'c2' ],
  [ 'a1', 'b1', 'c3' ],
  [ 'a1', 'b2', 'c1' ],
  [ 'a1', 'b2', 'c2' ],
  [ 'a1', 'b2', 'c3' ] ]
