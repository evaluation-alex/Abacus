Abacus.CombinatorialIterator.Template (VERSION = 0.1.0)
---
o = Abacus.CombinatorialIterator.Template("(){2}(n)(m)(4)(5)((3*n+4))((m+4))")
o.tree()
{
  "fixed": 4,
  "variables": [
    "n",
    "m"
  ],
  "references": {
    "4": {
      "type": "const",
      "pos": [
        4
      ],
      "key": "4",
      "val": 4
    },
    "5": {
      "type": "const",
      "pos": [
        5
      ],
      "key": "5",
      "val": 5
    },
    "n": {
      "type": "ref",
      "pos": [
        2
      ],
      "key": "n",
      "val": 2,
      "compute": false
    },
    "m": {
      "type": "ref",
      "pos": [
        3
      ],
      "key": "m",
      "val": 3,
      "compute": false
    },
    "(3*n+4)": {
      "type": "expr",
      "pos": [
        6
      ],
      "key": "(3*n+4)",
      "val": 10,
      "refs": [
        "n"
      ],
      "coef": {
        "n": 3
      },
      "zero": 4
    },
    "(m+4)": {
      "type": "expr",
      "pos": [
        7
      ],
      "key": "(m+4)",
      "val": 7,
      "refs": [
        "m"
      ],
      "coef": {
        "m": 1
      },
      "zero": 4
    }
  },
  "positions": {
    "2": {
      "type": "ref",
      "pos": [
        2
      ],
      "key": "n",
      "val": 2,
      "compute": false
    },
    "3": {
      "type": "ref",
      "pos": [
        3
      ],
      "key": "m",
      "val": 3,
      "compute": false
    },
    "4": {
      "type": "const",
      "pos": [
        4
      ],
      "key": "4",
      "val": 4
    },
    "5": {
      "type": "const",
      "pos": [
        5
      ],
      "key": "5",
      "val": 5
    },
    "6": {
      "type": "expr",
      "pos": [
        6
      ],
      "key": "(3*n+4)",
      "val": 10,
      "refs": [
        "n"
      ],
      "coef": {
        "n": 3
      },
      "zero": 4
    },
    "7": {
      "type": "expr",
      "pos": [
        7
      ],
      "key": "(m+4)",
      "val": 7,
      "refs": [
        "m"
      ],
      "coef": {
        "m": 1
      },
      "zero": 4
    }
  },
  "constraints": {
    "unique": true,
    "ordered": false,
    "strongly_ordered": true
  }
}
o = Abacus.CombinatorialIterator.Template("(n)(m)(k)(l)((l))((k))((m))((n))")
o.tree()
{
  "fixed": 4,
  "variables": [
    "n",
    "m",
    "k",
    "l"
  ],
  "references": {
    "n": {
      "type": "ref",
      "pos": [
        0
      ],
      "key": "n",
      "val": 0,
      "compute": false
    },
    "m": {
      "type": "ref",
      "pos": [
        1
      ],
      "key": "m",
      "val": 1,
      "compute": false
    },
    "k": {
      "type": "ref",
      "pos": [
        2
      ],
      "key": "k",
      "val": 2,
      "compute": false
    },
    "l": {
      "type": "ref",
      "pos": [
        3
      ],
      "key": "l",
      "val": 3,
      "compute": false
    },
    "(l)": {
      "type": "expr",
      "pos": [
        4
      ],
      "key": "(l)",
      "val": 3,
      "refs": [
        "l"
      ],
      "coef": {
        "l": 1
      },
      "zero": 0
    },
    "(k)": {
      "type": "expr",
      "pos": [
        5
      ],
      "key": "(k)",
      "val": 2,
      "refs": [
        "k"
      ],
      "coef": {
        "k": 1
      },
      "zero": 0
    },
    "(m)": {
      "type": "expr",
      "pos": [
        6
      ],
      "key": "(m)",
      "val": 1,
      "refs": [
        "m"
      ],
      "coef": {
        "m": 1
      },
      "zero": 0
    },
    "(n)": {
      "type": "expr",
      "pos": [
        7
      ],
      "key": "(n)",
      "val": 0,
      "refs": [
        "n"
      ],
      "coef": {
        "n": 1
      },
      "zero": 0
    }
  },
  "positions": {
    "0": {
      "type": "ref",
      "pos": [
        0
      ],
      "key": "n",
      "val": 0,
      "compute": false
    },
    "1": {
      "type": "ref",
      "pos": [
        1
      ],
      "key": "m",
      "val": 1,
      "compute": false
    },
    "2": {
      "type": "ref",
      "pos": [
        2
      ],
      "key": "k",
      "val": 2,
      "compute": false
    },
    "3": {
      "type": "ref",
      "pos": [
        3
      ],
      "key": "l",
      "val": 3,
      "compute": false
    },
    "4": {
      "type": "expr",
      "pos": [
        4
      ],
      "key": "(l)",
      "val": 3,
      "refs": [
        "l"
      ],
      "coef": {
        "l": 1
      },
      "zero": 0
    },
    "5": {
      "type": "expr",
      "pos": [
        5
      ],
      "key": "(k)",
      "val": 2,
      "refs": [
        "k"
      ],
      "coef": {
        "k": 1
      },
      "zero": 0
    },
    "6": {
      "type": "expr",
      "pos": [
        6
      ],
      "key": "(m)",
      "val": 1,
      "refs": [
        "m"
      ],
      "coef": {
        "m": 1
      },
      "zero": 0
    },
    "7": {
      "type": "expr",
      "pos": [
        7
      ],
      "key": "(n)",
      "val": 0,
      "refs": [
        "n"
      ],
      "coef": {
        "n": 1
      },
      "zero": 0
    }
  },
  "constraints": {
    "unique": false,
    "ordered": false,
    "strongly_ordered": false
  }
}
