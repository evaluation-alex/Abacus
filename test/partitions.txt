Note: Due to the large number of combinatorial samples,
Abacus combinatorics use an Iterator pattern to succesively and consistently
generate all combinatorial objects without storing all of them in memory at once






Abacus.Partitions
---
part = Abacus.Partition(13)
part.total()
284
part.next()
[ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ]
part.hasNext()
true
part.next()
[ 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ]
part.all()
[ [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ],
  [ 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ],
  [ 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1 ],
  [ 2, 2, 2, 1, 1, 1, 1, 1, 1, 1 ],
  [ 2, 2, 2, 2, 1, 1, 1, 1, 1 ],
  [ 2, 2, 2, 2, 2, 1, 1, 1 ],
  [ 2, 2, 2, 2, 2, 2, 1 ],
  [ 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ],
  [ 3, 2, 1, 1, 1, 1, 1, 1, 1, 1 ],
  [ 3, 2, 2, 1, 1, 1, 1, 1, 1 ],
  [ 3, 2, 2, 2, 1, 1, 1, 1 ],
  [ 3, 2, 2, 2, 2, 1, 1 ],
  [ 3, 2, 2, 2, 2, 2 ],
  [ 3, 3, 1, 1, 1, 1, 1, 1, 1 ],
  [ 3, 3, 2, 1, 1, 1, 1, 1 ],
  [ 3, 3, 2, 2, 1, 1, 1 ],
  [ 3, 3, 2, 2, 2, 1 ],
  [ 3, 3, 3, 1, 1, 1, 1 ],
  [ 3, 3, 3, 2, 1, 1 ],
  [ 3, 3, 3, 2, 2 ],
  [ 3, 3, 3, 3, 1 ],
  [ 4, 1, 1, 1, 1, 1, 1, 1, 1, 1 ],
  [ 4, 2, 1, 1, 1, 1, 1, 1, 1 ],
  [ 4, 2, 2, 1, 1, 1, 1, 1 ],
  [ 4, 2, 2, 2, 1, 1, 1 ],
  [ 4, 2, 2, 2, 2, 1 ],
  [ 4, 3, 1, 1, 1, 1, 1, 1 ],
  [ 4, 3, 2, 1, 1, 1, 1 ],
  [ 4, 3, 2, 2, 1, 1 ],
  [ 4, 3, 2, 2, 2 ],
  [ 4, 3, 3, 1, 1, 1 ],
  [ 4, 3, 3, 2, 1 ],
  [ 4, 3, 3, 3 ],
  [ 4, 4, 1, 1, 1, 1, 1 ],
  [ 4, 4, 2, 1, 1, 1 ],
  [ 4, 4, 2, 2, 1 ],
  [ 4, 4, 3, 1, 1 ],
  [ 4, 4, 3, 2 ],
  [ 4, 4, 4, 1 ],
  [ 5, 1, 1, 1, 1, 1, 1, 1, 1 ],
  [ 5, 2, 1, 1, 1, 1, 1, 1 ],
  [ 5, 2, 2, 1, 1, 1, 1 ],
  [ 5, 2, 2, 2, 1, 1 ],
  [ 5, 2, 2, 2, 2 ],
  [ 5, 3, 1, 1, 1, 1, 1 ],
  [ 5, 3, 2, 1, 1, 1 ],
  [ 5, 3, 2, 2, 1 ],
  [ 5, 3, 3, 1, 1 ],
  [ 5, 3, 3, 2 ],
  [ 5, 4, 1, 1, 1, 1 ],
  [ 5, 4, 2, 1, 1 ],
  [ 5, 4, 2, 2 ],
  [ 5, 4, 3, 1 ],
  [ 5, 4, 4 ],
  [ 5, 5, 1, 1, 1 ],
  [ 5, 5, 2, 1 ],
  [ 5, 5, 3 ],
  [ 6, 1, 1, 1, 1, 1, 1, 1 ],
  [ 6, 2, 1, 1, 1, 1, 1 ],
  [ 6, 2, 2, 1, 1, 1 ],
  [ 6, 2, 2, 2, 1 ],
  [ 6, 3, 1, 1, 1, 1 ],
  [ 6, 3, 2, 1, 1 ],
  [ 6, 3, 2, 2 ],
  [ 6, 3, 3, 1 ],
  [ 6, 4, 1, 1, 1 ],
  [ 6, 4, 2, 1 ],
  [ 6, 4, 3 ],
  [ 6, 5, 1, 1 ],
  [ 6, 5, 2 ],
  [ 6, 6, 1 ],
  [ 7, 1, 1, 1, 1, 1, 1 ],
  [ 7, 2, 1, 1, 1, 1 ],
  [ 7, 2, 2, 1, 1 ],
  [ 7, 2, 2, 2 ],
  [ 7, 3, 1, 1, 1 ],
  [ 7, 3, 2, 1 ],
  [ 7, 3, 3 ],
  [ 7, 4, 1, 1 ],
  [ 7, 4, 2 ],
  [ 7, 5, 1 ],
  [ 7, 6 ],
  [ 8, 1, 1, 1, 1, 1 ],
  [ 8, 2, 1, 1, 1 ],
  [ 8, 2, 2, 1 ],
  [ 8, 3, 1, 1 ],
  [ 8, 3, 2 ],
  [ 8, 4, 1 ],
  [ 8, 5 ],
  [ 9, 1, 1, 1, 1 ],
  [ 9, 2, 1, 1 ],
  [ 9, 2, 2 ],
  [ 9, 3, 1 ],
  [ 9, 4 ],
  [ 10, 1, 1, 1 ],
  [ 10, 2, 1 ],
  [ 10, 3 ],
  [ 11, 1, 1 ],
  [ 11, 2 ],
  [ 12, 1 ],
  [ 13 ] ]
part.forward()
while(part.hasPrev()) echo(part.prev())
[ 13 ]
[ 12, 1 ]
[ 11, 2 ]
[ 11, 1, 1 ]
[ 10, 3 ]
[ 10, 2, 1 ]
[ 10, 1, 1, 1 ]
[ 9, 4 ]
[ 9, 3, 1 ]
[ 9, 2, 2 ]
[ 9, 2, 1, 1 ]
[ 9, 1, 1, 1, 1 ]
[ 8, 5 ]
[ 8, 4, 1 ]
[ 8, 3, 2 ]
[ 8, 3, 1, 1 ]
[ 8, 2, 2, 1 ]
[ 8, 2, 1, 1, 1 ]
[ 8, 1, 1, 1, 1, 1 ]
[ 7, 6 ]
[ 7, 5, 1 ]
[ 7, 4, 2 ]
[ 7, 4, 1, 1 ]
[ 7, 3, 3 ]
[ 7, 3, 2, 1 ]
[ 7, 3, 1, 1, 1 ]
[ 7, 2, 2, 2 ]
[ 7, 2, 2, 1, 1 ]
[ 7, 2, 1, 1, 1, 1 ]
[ 7, 1, 1, 1, 1, 1, 1 ]
[ 6, 6, 1 ]
[ 6, 5, 2 ]
[ 6, 5, 1, 1 ]
[ 6, 4, 3 ]
[ 6, 4, 2, 1 ]
[ 6, 4, 1, 1, 1 ]
[ 6, 3, 3, 1 ]
[ 6, 3, 2, 2 ]
[ 6, 3, 2, 1, 1 ]
[ 6, 3, 1, 1, 1, 1 ]
[ 6, 2, 2, 2, 1 ]
[ 6, 2, 2, 1, 1, 1 ]
[ 6, 2, 1, 1, 1, 1, 1 ]
[ 6, 1, 1, 1, 1, 1, 1, 1 ]
[ 5, 5, 3 ]
[ 5, 5, 2, 1 ]
[ 5, 5, 1, 1, 1 ]
[ 5, 4, 4 ]
[ 5, 4, 3, 1 ]
[ 5, 4, 2, 2 ]
[ 5, 4, 2, 1, 1 ]
[ 5, 4, 1, 1, 1, 1 ]
[ 5, 3, 3, 2 ]
[ 5, 3, 3, 1, 1 ]
[ 5, 3, 2, 2, 1 ]
[ 5, 3, 2, 1, 1, 1 ]
[ 5, 3, 1, 1, 1, 1, 1 ]
[ 5, 2, 2, 2, 2 ]
[ 5, 2, 2, 2, 1, 1 ]
[ 5, 2, 2, 1, 1, 1, 1 ]
[ 5, 2, 1, 1, 1, 1, 1, 1 ]
[ 5, 1, 1, 1, 1, 1, 1, 1, 1 ]
[ 4, 4, 4, 1 ]
[ 4, 4, 3, 2 ]
[ 4, 4, 3, 1, 1 ]
[ 4, 4, 2, 2, 1 ]
[ 4, 4, 2, 1, 1, 1 ]
[ 4, 4, 1, 1, 1, 1, 1 ]
[ 4, 3, 3, 3 ]
[ 4, 3, 3, 2, 1 ]
[ 4, 3, 3, 1, 1, 1 ]
[ 4, 3, 2, 2, 2 ]
[ 4, 3, 2, 2, 1, 1 ]
[ 4, 3, 2, 1, 1, 1, 1 ]
[ 4, 3, 1, 1, 1, 1, 1, 1 ]
[ 4, 2, 2, 2, 2, 1 ]
[ 4, 2, 2, 2, 1, 1, 1 ]
[ 4, 2, 2, 1, 1, 1, 1, 1 ]
[ 4, 2, 1, 1, 1, 1, 1, 1, 1 ]
[ 4, 1, 1, 1, 1, 1, 1, 1, 1, 1 ]
[ 3, 3, 3, 3, 1 ]
[ 3, 3, 3, 2, 2 ]
[ 3, 3, 3, 2, 1, 1 ]
[ 3, 3, 3, 1, 1, 1, 1 ]
[ 3, 3, 2, 2, 2, 1 ]
[ 3, 3, 2, 2, 1, 1, 1 ]
[ 3, 3, 2, 1, 1, 1, 1, 1 ]
[ 3, 3, 1, 1, 1, 1, 1, 1, 1 ]
[ 3, 2, 2, 2, 2, 2 ]
[ 3, 2, 2, 2, 2, 1, 1 ]
[ 3, 2, 2, 2, 1, 1, 1, 1 ]
[ 3, 2, 2, 1, 1, 1, 1, 1, 1 ]
[ 3, 2, 1, 1, 1, 1, 1, 1, 1, 1 ]
[ 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ]
[ 2, 2, 2, 2, 2, 2, 1 ]
[ 2, 2, 2, 2, 2, 1, 1, 1 ]
[ 2, 2, 2, 2, 1, 1, 1, 1, 1 ]
[ 2, 2, 2, 1, 1, 1, 1, 1, 1, 1 ]
[ 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1 ]
[ 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ]
[ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ]
part.random()
[ 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ]
part.dispose()
Abacus.Partition.pack([4,3,3,2,1,1])
[ [ 4, 1 ], [ 3, 2 ], [ 2, 1 ], [ 1, 2 ] ]
Abacus.Partition.unpack([[4,1],[3,2],[2,1],[1,2]])
[ 4, 3, 3, 2, 1, 1 ]
Abacus.Partition.conjugate([6,4,3,1])
[ 4, 3, 3, 2, 1, 1 ]
Abacus.Partition.conjugate([4,3,3,2,1,1])
[ 6, 4, 3, 1 ]
Abacus.Partition.conjugate([4])
[ 1, 1, 1, 1 ]
Abacus.Partition.conjugate([1,1,1,1])
[ 4 ]
