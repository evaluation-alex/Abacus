/**
*
*   Abacus
*   A combinatorics library for Node/JS, PHP, Python
*   @version: 0.1
*   https://github.com/foo123/Abacus
**/
!function( root, name, factory ) {
"use strict";
// export the module, umd-style (no other dependencies)
var isCommonJS = ("object" === typeof(module)) && module.exports, 
    isAMD = ("function" === typeof(define)) && define.amd, m;

// CommonJS, node, etc..
if ( isCommonJS ) 
    module.exports = (module.$deps = module.$deps || {})[ name ] = module.$deps[ name ] || (factory.call( root, {NODE:module} ) || 1);

// AMD, requireJS, etc..
else if ( isAMD && ("function" === typeof(require)) && ("function" === typeof(require.specified)) && require.specified(name) ) 
    define( name, ['require', 'exports', 'module'], function( require, exports, module ){ return factory.call( root, {AMD:module} ); } );

// browser, web worker, etc.. + AMD, other loaders
else if ( !(name in root) ) 
    (root[ name ] = (m=factory.call( root, {} ) || 1)) && isAMD && define( name, [], function( ){ return m; } );
}(  /* current root */          this, 
    /* module name */           "Abacus",
    /* module factory */        function( exports, undef ) {
"use strict";

var PROTO = 'prototype', HAS = 'hasOwnProperty', Extend = Object.create
    ,Merge = function(a, b) {
        for (var p in b) 
            if (b[HAS](p)) a[p] = b[p];
        return a;
    }
    ,Class = function(s, c) {
        if ( 1 === arguments.length )
        {
            c = s;
            s = Object;
        }
        var ctor = c.constructor;
        if ( c[HAS]('__static__') )
        {
            ctor = Merge(ctor, c.__static__);
            delete c.__static__;
        }
        ctor[PROTO] = Merge(Extend(s[PROTO]), c);
        return ctor;
    }
    // http://graphics.stanford.edu/~seander/bithacks.html#IntegerLogLookup
    // compute binary bitwise logarithm, using BINLOG lookup table + binary-search (a variation of dynamic programming)
    ,ArrayUint8 = 'undefined' !== typeof Uint8Array ? Uint8Array : Array
    // pre-computed lookup tables for binary log, factorial and binomial
    ,BINLOG_256 = new ArrayUint8([0, 0, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7])
    ,FACT_N_4_68 = [24,120,720,5040,40320,362880,3628800,39916800,479001600,6227020800,87178291200,1307674368000,20922789888000,355687428096001,6402373705727948,121645100408832080,2432902008176640000,51090942171709420000,1.1240007277776035e+21,2.5852016738884878e+22,6.204484017332391e+23,1.5511210043330954e+25,4.032914611266054e+26,1.0888869450418268e+28,3.0488834461171542e+29,8.841761993739751e+30,2.6525285981219316e+32,8.22283865417801e+33,2.631308369336913e+35,8.683317618811995e+36,2.952327990396092e+38,1.0333147966386149e+40,3.71993326789901e+41,1.3763753091226355e+43,5.230226174665922e+44,2.039788208119776e+46,8.159152832479056e+47,3.3452526613164405e+49,1.405006117752897e+51,6.041526306337411e+52,2.658271574788457e+54,1.1962222086548374e+56,5.502622159812145e+57,2.5862324151116456e+59,1.2413915592536315e+61,6.082818640342558e+62,3.041409320171302e+64,1.5511187532874088e+66,8.065817517094494e+67,4.274883284060001e+69,2.308436973392454e+71,1.2696403353658287e+73,7.109985878048745e+74,4.052691950487695e+76,2.3505613312828353e+78,1.3868311854568818e+80,8.320987112741444e+81,5.075802138772222e+83,3.146997326038748e+85,1.9826083154044198e+87,1.2688693218588067e+89,8.247650592082321e+90,5.443449390774147e+92,3.647111091818739e+94]    

    // utils
    ,random = Math.random, round = Math.round, ceil = Math.ceil
    ,floor = Math.floor, exp = Math.exp, log = Math.log, pow = Math.pow
    ,min = Math.min, max = Math.max
    ,log2 = Math.log2 || function(x) { return Math.log(x) / Math.LN2; }
    ,rnd = function( m, M ) { return round( (M-m)*random() + m ); }
    ,EULER = Math.E
    ,clamp = function clamp( v, m, M ) { return ( v < m ) ? m : ((v > M) ? M : v); }
    ,summation = function(s, a) { return s+a }
    ,array = function( n ) { return new Array(n); }
    ,n_array = function n_array( dims ) {
        var len = dims.shift( ),
            a = len ? new Array( len ) : [ ], i
        ;
        if ( dims.length )
        {
            for (i=0; i<len; i++) a[ i ] = n_array( dims.slice(0) );
        }
        return a;
    }
    ,range = function range( n, options )  {
        var a, i;
        options = options || {};
        a = new Array( n );
        if ( options[HAS]('value') )
        {
            var v = options.value, is_arr_str = !!v.slice;
            for (i=0; i<n; i++) {a[ i ] = is_arr_str ? v.slice() : v;}
        }
        else
        {
            var start = options[HAS]('start') ? parseInt(options.start, 10) : 0,
                step = options[HAS]('step') ? parseInt(options.step, 10) : 1,
                istep = 0;
            for (i=0; i<n; i++) {a[ i ] = istep+start; istep += step;}
        }
        return a;
    }
    // http://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle
    // https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle#Sattolo.27s_algorithm
    ,shuffle = function shuffle( a, cyclic, copied ) {
        var N, perm, swap, ac, offset;
        ac = true === copied ? a.slice() : a;
        offset = true === cyclic ? 1 : 0;
        N = ac.length;
        while ( offset < N-- )
        { 
            perm = rnd( 0, N-offset ); 
            if ( N === perm ) continue;
            swap = ac[ N ]; 
            ac[ N ] = ac[ perm ]; 
            ac[ perm ] = swap; 
        }
        // in-place or copy
        return ac;
    }
    // http://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle
    // eXtended shuffle variation to shuffle only parts of array
    // while leaving other parts unaltered
    ,xshuffle = function xshuffle( a, o, copied ) {
        var i, j, N, perm, swap, inc, ac, offset;
        ac = true === copied ? a.slice() : a;
        o = o || {};
        offset = true === o.cyclic ? 1 : 0;
        if ( o[HAS]('included') && o.included.length )
        {
            inc = o.included;
        }
        else if ( o[HAS]('included_range') && o.included_range.length )
        {
            inc = []; i=0; j=0;
            while (i < a.length)
            {
                if (j<o.included_range.length && (i>=o.included_range[j] && (j+1 >=o.included_range.length || i<=o.included_range[j+1]))) inc.push( i );
                else j+=2;
                i++;
            }
        }
        else if ( o[HAS]('excluded') && o.excluded.length )
        {
            inc = []; i=0; j=0;
            while (i < a.length)
            {
                if (j>=o.excluded.length || i<o.excluded[j]) inc.push( i );
                else j++;
                i++;
            }
        }
        else if ( o[HAS]('excluded_range') && o.excluded_range.length )
        {
            inc = []; i=0; j=0;
            while (i < a.length)
            {
                if (j<o.excluded_range.length && i>=o.excluded_range[j]) {i = j+1<o.excluded_range.length ? o.excluded_range[j+1] : i; j+=2;}
                else inc.push( i );
                i++;
            }
        }
        else
        {
            inc = [];
        }
        N = inc.length;
        while ( offset < N-- )
        { 
            perm = rnd( 0, N-offset ); 
            if ( N === perm ) continue;
            swap = ac[ inc[N] ]; 
            ac[ inc[N] ] = ac[ inc[perm] ]; 
            ac[ inc[perm] ] = swap; 
        }
        // in-place or copy
        return ac;
    }
    // Array multi - sorter utility
    // returns a sorter that can (sub-)sort by multiple (nested) fields 
    // each ascending or descending independantly
    // https://github.com/foo123/sinful.js
    ,sorter = function () {

        var arr = this, i, args = arguments, l = args.length,
            a, b, step, lt, gt,
            field, filter_args, sorter_args, desc, dir, sorter,
            ASC = '|^', DESC = '|v';
        // |^ after a (nested) field indicates ascending sorting (default), 
        // example "a.b.c|^"
        // |v after a (nested) field indicates descending sorting, 
        // example "b.c.d|v"
        if ( l )
        {
            step = 1;
            sorter = [];
            sorter_args = [];
            filter_args = []; 
            for (i=l-1; i>=0; i--)
            {
                field = args[i];
                // if is array, it contains a filter function as well
                filter_args.unshift('f'+i);
                if ( field.push )
                {
                    sorter_args.unshift(field[1]);
                    field = field[0];
                }
                else
                {
                    sorter_args.unshift(null);
                }
                dir = field.slice(-2);
                if ( DESC === dir ) 
                {
                    desc = true;
                    field = field.slice(0,-2);
                }
                else if ( ASC === dir )
                {
                    desc = false;
                    field = field.slice(0,-2);
                }
                else
                {
                    // default ASC
                    desc = false;
                }
                field = field.length ? '["' + field.split('.').join('"]["') + '"]' : '';
                a = "a"+field; b = "b"+field;
                if ( sorter_args[0] ) 
                {
                    a = filter_args[0] + '(' + a + ')';
                    b = filter_args[0] + '(' + b + ')';
                }
                lt = desc ?(''+step):('-'+step); gt = desc ?('-'+step):(''+step);
                sorter.unshift("("+a+" < "+b+" ? "+lt+" : ("+a+" > "+b+" ? "+gt+" : 0))");
                step <<= 1;
            }
            // use optional custom filters as well
            return (new Function(
                    filter_args.join(','), 
                    'return function(a,b) { return ('+sorter.join(' + ')+'); };'
                    ))
                    .apply(null, sorter_args);
        }
        else
        {
            a = "a"; b = "b"; lt = '-1'; gt = '1';
            sorter = ""+a+" < "+b+" ? "+lt+" : ("+a+" > "+b+" ? "+gt+" : 0)";
            return new Function("a,b", 'return ('+sorter+');');
        }
    }
    ,sum = function sum( arr ) {
        var s = 0, i, l = arr.length;
        for (i=0; i<l; i++) s += arr[i];
        return s;
    }
    ,intersection = function intersect_sorted2( a, b ) {
        var ai = 0, bi = 0, intersection = [ ],
            al = a.length, bl = b.length;
        // assume a, b lists are sorted ascending
        while( ai < al && bi < bl )
        {
            if      ( a[ai] < b[bi] )
            { 
                ai++; 
            }
            else if ( a[ai] > b[bi] )
            { 
                bi++; 
            }
            else // they're equal
            {
                intersection.push( a[ ai ] );
                ai++; bi++;
            }
        }
        return intersection;
    }
    ,union = function merge_unique_sorted2( a, b ) {
        var ai = 0, bi = 0, merged = [ ], last,
            al = a.length, bl = b.length;
        // assume a, b lists are sorted ascending 
        // <DEL>and each one does NOT contain duplicates</DEL>
        while( ai < al && bi < bl )
        {
            if      (merged.length) // handle any possible duplicates inside SAME list
            {
                if (a[ai] === last)
                {
                    ai++; continue;
                }
                else if (b[bi] === last)
                {
                    bi++; continue;
                }
            }
            if      ( a[ai] < b[bi] )
            { 
                merged.push( last=a[ai++] ); 
            }
            else if ( a[ai] > b[bi] )
            { 
                merged.push( last=b[bi++] ); 
            }
            else // they're equal, push one unique
            {
                merged.push( last=a[ ai ] );
                ai++; bi++;
            }
        }
        while ( ai < al ) if (a[ai++] !== last) merged.push( last=a[ai-1] ); 
        while ( bi < bl ) if (b[bi++] !== last) merged.push( last=b[bi-1] ); 
        return merged;
    }
    ,cycle2swaps = function( cycle ) {
        var swaps = [], c = cycle.length, j;
        if ( c > 1 ) for (j=c-1; j>=1; j--) swaps.push([cycle[0],cycle[j]])
        return swaps;
    }
    ,partition2cycles = function( partition ) {
        var cycles = [], cycle, i,
            pi, pl = partition.length, p,
            current = 0;
        for (pi=0; pi<pl; pi++)
        {
            p = partition[pi];
            cycle = new Array( p );
            // lexicographic cycle(s)
            for (i=0; i<p; i++) cycle[i] = current++;
            cycles.push(cycle);
        }
        return cycles;
    }
    ,factorial = function( n ) {
        var Fn;
        if ( 0 > n ) 
        {
            Fn = 0;
        }
        else if ( 2 > n ) 
        {
            Fn = 1;
        }
        else if ( 4 > n ) 
        {
            Fn = n*(n-1);
        }
        else if ( 68 > n ) 
        {
            // use fast pre-computed lookup table
            Fn = FACT_N_4_68[ n-4 ];
        }
        else
        {
            // compute it directly
            // use logarithmic sums to avoid overflows etc..
            var logFn = 0;
            while ( n > 1 ) logFn += log(n--);
            Fn = floor(0.5+exp(logFn));
        }
        return Fn;
    }
    // http://en.wikipedia.org/wiki/Derangement
    ,subfactorial = function( n ) {
        return floor(0.5 + factorial( n )/EULER);
    }
    // http://en.wikipedia.org/wiki/Binomial_coefficient
    ,binomial = function( n, k ) {
        var Cnk;
        k = min(k, n - k); // take advantage of symmetry
        if ( 0 > k || 1 > n ) 
        {
            Cnk = 0;
        }
        else if ( 0 === k || 1 === n ) 
        {
            Cnk = 1;
        }
        else if ( 1 === k ) 
        {
            Cnk = n;
        }
        else if ( 67 > n ) 
        {
            // use fast pre-computed lookup table
            Cnk = BINOM_N_K_3_67[ ((n-3)*(n-2)>>>1) + k-2 ];
        }
        else
        {
            // compute it directly
            // use logarithmic sums to avoid overflows etc..
            var logCnk = 0, i;
            for (i=0; i<k; i++) logCnk += log(n - i) - log(k - i);
            Cnk = floor(0.5+exp(logCnk));
        }
        return Cnk;
    }
    ,pow2 = function( n ) {
        return (1 << n)>>>0;
    }
    ,powNK = function( n, k ) {
        return pow(n, k);
    }
     // fast binary bitwise logarithm (most significant bit)
    ,log2msb = function( x ) {
        // assume x is 32-bit unsigned integer
        if ( 0 === x ) return -1;
        return 0xFFFF0000&x?(0xFF000000&x?24+BINLOG_256[x>>>24]:16+BINLOG_256[x>>>16]):(0x0000FF00&x?8+BINLOG_256[x>>>8]:BINLOG_256[x/*&0xFF*/]);
    }
    // recursively compute the partition count using the recursive relation:
    // http://en.wikipedia.org/wiki/Partition_(number_theory)#Partition_function
    // http://www.programminglogic.com/integer-partition-algorithm/
    ,partitions = function partitions( n, k, m ) {
        // compute number of integer partitions of n
        // into exactly k parts
        // having m as max value
        // m + k-1 <= n <= k*m
        if ( m === n && 1 === k ) return 1;
        if ( m+k>n+1 || k*m<n ) return 0;
        var j, jmax=min(m,n-m-k+2), jmin=max(1,ceil((n-m)/(k-1))), p = 0;
        for (j=jmin; j<=jmax; j++) p += partitions( n-m, k-1, j );
        return p;
    }
;

var Abacus = {
    VERSION: "0.1"
    
    ,random: random
    
    ,random_int: rnd
    
    ,clamp: clamp
    
    ,array: array

    ,range: range

    ,n_array: n_array

    ,sorter: sorter
    
    ,sum: sum
    
    ,intersection: intersection
    
    ,union: union
};

// Abacus.CombinatorialIterator, Combinatorial Base Class and Iterator Interface
var CombinatorialIterator = Abacus.CombinatorialIterator = Class({
    
    constructor: function CombinatorialIterator( n, k ) {
        var self = this;
        if ( !(self instanceof CombinatorialIterator) ) return new CombinatorialIterator(n, k);
        self.$n = n||0; self.$k = k||0;
        self.$total = self.constructor.count( self.$n, self.$k );
        self.rewind( );
    }
    
    ,__static__: {
         count: function( n, k ) { return 0; }
        ,index: function( item, n, k ) { return -1; }
        ,item: function( index, n, k ) { return null; }
        ,adjacent: function( offset, item, n, k ) {
            if ( -1 !== offset && 1 !== offset ) offset = 1;
            return item ? this.item( this.index(item, n, k)+offset, n, k ) : null;
        }
    }
    
    ,$n: 0,$k: 0
    ,$init: null
    ,$total: 0
    ,$index: null
    ,$current: null
    ,$prev: false
    ,$next: false
    
    ,dispose: function( ) {
        var self = this;
        self.$n = null;
        self.$k = null;
        self.$init = null;
        self.$total = 0;
        self.$index = null;
        self.$current = null;
        self.$prev = false;
        self.$next = false;
        return self;
    }
    
    ,total: function( ) { return this.$total; }
    
    ,randomise: function( ) { return this; }
    
    ,first: function( ) { return this.$current; }
    
    ,rewind: function( ) {
        var self = this;
        self.$index = 0;
        self.$current = self.first( );
        self.$prev = false;
        self.$next = true;
        return self;
    }
    
    ,hasNext: function( ) { return this.$next; }
    
    ,next: function( ) {
        var self = this, item = self.constructor.item,
            current = self.$current;
        // compute next
        if ( self.$index+1 < self.$total ) 
        {
            self.$next = true;
            self.$current = item( ++self.$index, self.$n, self.$k );
        }
        else
        {
            self.$next = false;
        }
        return current;
    }
    
    ,last: function( ) { return this.$current; }
    
    ,forward: function( ) {
        var self = this;
        self.$index = self.$total-1;
        self.$current = self.last( ); 
        self.$prev = true;
        self.$next = false;
        return self;
    }
    
    ,hasPrev: function( ) { return this.$prev; }
    
    ,prev: function( ) {
        var self = this, item = self.constructor.item,
            current = self.$current;
        // compute prev
        if ( self.$index-1 >= 0 ) 
        {
            self.$prev = true;
            self.$current = item( --self.$index, self.$n, self.$k );
        }
        else
        {
            self.$prev = false;
        }
        return current;
    }
    
    ,adjacent_next: function( ) {
        var self = this, 
            adjacent = self.constructor.adjacent, 
            item = self.$current;
        var next = adjacent(1, item, self.$n, self.$k);
        if ( !next ) 
        {
            self.$next = false;
        }
        else
        {            
            self.$current = next;
            self.$index++;
        }
        return item;
    }
    
    ,adjacent_prev: function( ) {
        var self = this, 
            adjacent = self.constructor.adjacent, 
            item = self.$current;
        var next = adjacent(-1, item, self.$n, self.$k);
        if ( !next ) 
        {
            self.$prev = false;
        }
        else
        {            
            self.$current = next;
            self.$index--;
        }
        return item;
    }
    
    ,random: function( ) {
        var self = this;
        return self.constructor.item( rnd(0, self.$total-1), self.$n, self.$k );
    }
    
    ,get: function( index ) {
        var self = this, item = self.constructor.item;
        if ( !arguments.length ) return self.$current;
        else if ( index >= 0 && index < self.$total ) return item( index, self.$n, self.$k );
        return null;
    }
    
    ,index: function( index ) {
        var self = this;
        if ( arguments.length )
        {
            if ( index >=0 && index < self.$total ) self.$index = index;
            return self;
        }
        return self.$index;
    }
    
    ,all: function( ) {
        var self = this, all = [];
        self.rewind();
        while ( self.hasNext() ) all.push( self.next() );
        return all;
    }
});

// https://en.wikipedia.org/wiki/Permutations
var Permutation = Abacus.Permutation = Class(CombinatorialIterator, {
    
    // extends and implements CombinatorialIterator
    constructor: function Permutation( n ) {
        var self = this, i;
        if ( !(self instanceof Permutation) ) return new Permutation(n);
        self.$init = new Array(n);
        for (i=0; i<n; i++) self.$init[i] = i;
        CombinatorialIterator.call(self, n);
    }
    
    ,__static__: {
         count: factorial
        // http://ldc.usb.ve/~bonet/reports/AAAI08-ws10-ranking.pdf
        // O(n log n) uniform lexicographic ranking.
        ,index: function( perm, n ) {
            var index = 0, i, j, node, ctr,
                k = ceil(log2(n)), Tl = (1<<(1+k))-1, 
                T = new Array(Tl), twok = 1<<k;
            for(i=0; i<Tl; i++) T[i] = 0;
            for(i=0; i<n; i++)
            {
                ctr = perm[i];
                node = twok + ctr;
                for(j=0; j<k; j++)
                {
                    if ( node&1 ) ctr = ctr - T[(node >>> 1) << 1];
                    T[node]++; node >>>= 1;
                }
                T[node]++;
                index = index * (n - i) + ctr;
            }
            return index;
        }
        // http://ldc.usb.ve/~bonet/reports/AAAI08-ws10-ranking.pdf
        // O(n log n) uniform lexicographic unranking.
        ,item: function( index, n ) {
            var perm = new Array(n), fn = factorial(n-1),
                i, j, i2, digit, node, rem,
                k = ceil(log2(n)), Tl = (1<<(1+k))-1,
                T = new Array(Tl), twok = 1<<k;
            
            for (i=0; i<=k; i++)
                for (j=1,i2=1<<i; j<=i2; j++) 
                    T[i2-1+j] = 1 << (k - i);
            
            rem = n-1;
            for (i=0; i<n; i++)
            {
                digit = ~~(index/fn); 
                node = 1;
                for (j=0; j<k; j++)
                {
                    T[node]--; node <<= 1;
                    if ( digit >= T[node] )
                    {
                        digit -= T[node];
                        node++;
                    }
                }
                T[node] = 0;
                perm[i] = node - twok;
                if ( rem )
                {
                    index %= fn; 
                    fn /= rem; 
                    rem--;
                }
            }
            return perm;
        }
        // http://en.wikipedia.org/wiki/Permutation#Systematic_generation_of_all_permutations
        ,adjacent: function( offset, item, n ) {
            if ( item )
            {
                var k, kl, l, r, s, next = item.slice( );
                
                if ( -1 === offset )
                {
                    //Find the largest index k such that a[k] > a[k + 1].
                    k = n-2;
                    while (k>=0 && next[k]<=next[k+1]) k--;
                    // If no such index exists, the permutation is the last permutation.
                    if ( k >=0 ) 
                    {
                        //Find the largest index kl greater than k such that a[k] > a[kl].
                        kl = n-1;
                        while (kl>k && next[k]<=next[kl]) kl--;
                        //Swap the value of a[k] with that of a[l].
                        s = next[k]; next[k] = next[kl]; next[kl] = s;
                        //Reverse the sequence from a[k + 1] up to and including the final element a[n].
                        l = k+1; r = n-1;
                        while (l < r) {s = next[l]; next[l++] = next[r]; next[r--] = s;}
                    }
                    else
                    {
                        next = null;
                    }
                }
                else //if ( 1 === offset )
                {
                    //Find the largest index k such that a[k] < a[k + 1].
                    k = n-2;
                    while (k>=0 && next[k]>=next[k+1]) k--;
                    // If no such index exists, the permutation is the last permutation.
                    if ( k >=0 ) 
                    {
                        //Find the largest index kl greater than k such that a[k] < a[kl].
                        kl = n-1;
                        while (kl>k && next[k]>=next[kl]) kl--;
                        //Swap the value of a[k] with that of a[l].
                        s = next[k]; next[k] = next[kl]; next[kl] = s;
                        //Reverse the sequence from a[k + 1] up to and including the final element a[n].
                        l = k+1; r = n-1;
                        while (l < r) {s = next[l]; next[l++] = next[r]; next[r--] = s;}
                    }
                    else
                    {
                        next = null;
                    }
                }
                return next;
            }
            return null;
        }
        ,inverse: function( perm, n ) {
            var i, iperm = new Array(n);
            for (i=0; i<n; i++) iperm[perm[i]] = i;
            return iperm;
        }
        ,toCycles: function( perm, n, strict ) {
            var i, cycles = [], current, cycle, 
                min_cycle = true === strict ? 1 : 0,
                visited = new Array( n ),
                unvisited = new Array(n);
            for(i=0; i<n; i++) 
            {
                unvisited[ i ] = i;
                visited[ i ] = 0;
            }
            cycle = [current = unvisited.shift( )]; visited[ current ] = 1;
            while ( unvisited.length ) 
            {
                current = perm[ current ];
                if ( visited[current] )
                {
                    if ( cycle.length > min_cycle ) cycles.push( cycle );
                    cycle = [ ];
                    while ( unvisited.length && visited[current=unvisited.shift()] ) ;
                }
                if ( !visited[current] )
                {
                    cycle.push( current );
                    visited[ current ] = 1; 
                }
            }
            if ( cycle.length > min_cycle ) cycles.push( cycle );
            return cycles;
        }
        ,fromCycles: function( cycles, n ) {
            var perm = new Array(n), c, l = cycles.length, i, cl, cycle;
            for (i=0; i<n; i++) perm[ i ] = i;
            for (c=0; c<l; c++)
            {
                cycle = cycles[c]; cl = cycle.length;
                if ( cl < 2 ) continue;
                for (i=0; i<cl-1; i++) perm[cycle[i]] = cycle[i+1];
                perm[cycle[cl-1]] = cycle[0];
            }
            return perm;
        }
        ,cycle2swaps: cycle2swaps
        ,toSwaps: function( perm, n ) {
            var i, l, swaps = [], cycle,
                cycles = Permutation.toCycles( perm, n, true );
            for (i=0,l=cycles.length; i<l; i++)
            {
                cycle = cycles[i];
                swaps = swaps.concat( cycle2swaps( cycle ) );
            }
            return swaps;
        }
        ,fromSwaps: function( swaps, n ) {
            var i, l = swaps.length, perm = new Array(n), swap, temp;
            for (i=0; i<n; i++) perm[i] = i;
            for (i=0; i<l; i++)
            {
                swap = swaps[i];
                // swap
                temp = perm[swap[0]]; 
                perm[swap[0]] = perm[swap[1]];
                perm[swap[1]] = temp;
            }
            return perm;
        }
        ,toMatrix: function( perm, n, bycolumns ) {
            var mat = new Array(n), i, j;
            bycolumns = true === bycolumns;
            for (i=0; i<n; i++)
            {
                mat[i] = new Array(n);
                for (j=0; j<n; j++) mat[i][j] = 0;
            }
            for (i=0; i<n; i++)
            {
                if ( bycolumns ) mat[perm[i]][i] = 1;
                else mat[i][perm[i]] = 1;
            }
            return mat;
        }
        ,fromMatrix: function( mat, n, bycolumns ) {
            var perm = new Array(n), i, j;
            bycolumns = true === bycolumns;
            for (i=0; i<n; i++)
            {
                for (j=0; j<n; j++)
                {
                    if ( mat[i][j] ) 
                    {
                        if ( bycolumns ) perm[j] = i;
                        else perm[i] = j;
                    }
                }
            }
            return perm;
        }
        ,reassign: function( arr, perm ) {
            var i, l = arr.length, reassigned = new Array(l);
            for (i=0; i<l; i++) reassigned[i] = perm[arr[i]];
            return reassigned;
        }
        ,permute: function( arr, perm, copied ) {
            var i, l = arr.length, p, a;
            if ( true === copied )
            {
                p = new Array(l);
                a = arr;
            }
            else
            {
                p = arr;
                a = arr.slice();
            }
            for (i=0; i<l; i++) p[i] = a[perm[i]];
            return p;
        }
        ,shuffle: shuffle
        ,xshuffle: xshuffle
    }
    
    ,first: function( ) {
        var self = this;
        return self.$init.slice( );
    }
    
    ,last: function( ) {
        var self = this;
        return self.$init.slice( ).reverse( );
    }
    
    ,next: CombinatorialIterator[PROTO].adjacent_next
    
    ,prev: CombinatorialIterator[PROTO].adjacent_prev
    
    ,random: function( ) {
        return shuffle(this.$init, false, true);
    }
});

// http://en.wikipedia.org/wiki/Derangement
var Derangement = Abacus.Derangement = Class(CombinatorialIterator, {
    
    // extends and implements CombinatorialIterator
    constructor: function Derangement( n ) {
        var self = this, i;
        if ( !(self instanceof Derangement) ) return new Derangement(n);
        CombinatorialIterator.call(self, n);
    }
    
    ,__static__: {
         count: subfactorial
        ,index: CombinatorialIterator.index
        ,item: CombinatorialIterator.item
        ,adjacent: CombinatorialIterator.adjacent
    }
});

// https://en.wikipedia.org/wiki/Combinations
var Combination = Abacus.Combination = Class(CombinatorialIterator, {
    
    // extends and implements CombinatorialIterator
    constructor: function Combination( n, k ) {
        var self = this, i;
        if ( !(self instanceof Combination) ) return new Combination(n, k);
        CombinatorialIterator.call(self, n, k);
    }
    
    ,__static__: {
         count: binomial
        ,index: function( item, n, k ) {
            var index = 0, i, c, j, 
                Cnk = binomial(n, k);
            for (i=1; i<=k; i++)
            {
                // adjust the order to match MSB to LSB 
                // reverse of wikipedia article http://en.wikipedia.org/wiki/Combinatorial_number_system
                c = n-1-item[i-1]; j = k+1-i;
                index += j<=c?binomial(c, j):0;
            }
            return Cnk-1-index;
        }
        ,item: function( index, n, k ) {
            var item = new Array(k), i, j, cnk, cnk2, Bnk, m;
            //index = n_k-1-index;
            for (i=k; i>=1; i--)
            {
                if ( index > 0 )
                {
                    m = i-1; j = i;
                    cnk2 = cnk = binomial(m, j);
                    while ( cnk2 <= index )
                    {
                        m++; cnk = cnk2;
                        // use recursion relations to avoid recomputing binomial
                        cnk2 = m > j ? m*cnk/(m-j) : 1;
                    }
                    item[i-1] = m-1;
                    index -= cnk;
                }
                else
                {
                    item[i-1] = i-1;
                }
            }
            return item;
        }
        ,adjacent: function( offset, item, n, k ) {
            if ( item )
            {
                var i, index, limit, curr, next = item.slice();
                
                if ( -1 === offset )
                {
                    // compute prev indexes
                    // find index to move
                    i = k-1;  index = -1; limit = n-k;
                    while ( 0 <= i )
                    {
                        if ( next[i] > i ) { index = i; break; }
                        i--;
                    }
                    // adjust next indexes after the moved index
                    if ( -1 < index )
                    {
                        curr = next[k-1];
                        for (i=k-1; i>=index; i--) next[i] = --curr;
                    }
                    else 
                    { 
                        next = null; 
                    }
                }
                else //if ( 1 === offset )
                {
                    // compute next indexes
                    // find index to move
                    i = k-1;  index = -1; limit = n-k;
                    while ( 0 <= i )
                    {
                        if ( next[i] < limit+i ) { index = i; break; }
                        i--;
                    }
                    // adjust next indexes after the moved index
                    if ( -1 < index )
                    {
                        curr = next[index];
                        for (i=index; i<k; i++) next[i] = ++curr;
                    }
                    else 
                    { 
                        next = null; 
                    }
                }
                return next;
            }
            return null;
        }
        ,complement: function( comb, n, k ) {
            var i, i1 = 0, i2 = 0, comp = new Array(n-k);
            for (i=0; i<n; i++)
            {
                if (i1>=k || i<comb[i1]) comp[i2++] = i;
                else i1++;
            }
            return comp;
        }
        ,choose: function( arr, comb ) {
            var i, l = comb.length, chosen = new Array(l);
            for (i=0; i<l; i++) chosen[i] = arr[comb[i]];
            return chosen;
        }
        ,toMatrix: function( comb, n, k, bycolumns ) {
            var mat = new Array(n), i, j;
            bycolumns = true === bycolumns;
            for (i=0; i<n; i++)
            {
                mat[i] = new Array(n);
                for (j=0; j<n; j++) mat[i][j] = 0;
            }
            for (i=0; i<k; i++)
            {
                if ( bycolumns ) mat[comb[i]][i] = 1;
                else mat[i][comb[i]] = 1;
            }
            return mat;
        }
        ,fromMatrix: function( mat, n, k, bycolumns ) {
            var comb = new Array(k), i, j;
            bycolumns = true === bycolumns;
            for (i=0; i<n; i++)
            {
                for (j=0; j<n; j++)
                {
                    if ( mat[i][j] ) 
                    {
                        if ( bycolumns && j < k ) comb[j] = i;
                        else if ( !bycolumns && i < k ) comb[i] = j;
                    }
                }
            }
            return comb;
        }
    }
    
    ,first: function( ) {
        var self = this, i, k = self.$k, n = self.$n, item = new Array(k);
        for (i=0; i<k; i++) item[i] = i;
        return item;
    }
    
    ,last: function( ) {
        var self = this, i, k = self.$k, n = self.$n, 
            item = new Array(k), n_k = n-k-1;
        for (i=0; i<k; i++) item[i] = n_k+i;
        return item;
    }
    
    ,next: CombinatorialIterator[PROTO].adjacent_next
    
    ,prev: CombinatorialIterator[PROTO].adjacent_prev
    
    ,random: function( ) {
        var self = this, n = self.$n, k = self.$k,
            combination = new Array(k), m, M, i, index;
        i = k; m = 0; M = k-1;
        while ( 0 < i-- ) 
        { 
            index = rnd(m, M); 
            combination[k-i-1] = index; 
            m = index+1;  M = (M<n-1)?M+1:M; 
        }
        return combination;
    }
});
// aliases
Combination.conjugate = Combination.complement;

var CombinationRepeat = Abacus.CombinationRepeat = Class(CombinatorialIterator, {
    
    // extends and implements CombinatorialIterator
    constructor: function CombinationRepeat( n, k ) {
        var self = this, i;
        if ( !(self instanceof CombinationRepeat) ) return new CombinationRepeat(n, k);
        CombinatorialIterator.call(self, n, k);
    }
    
    ,__static__: {
         count: powNK
        ,index: CombinatorialIterator.index
        ,item: CombinatorialIterator.item
        ,adjacent: function( offset, item, n, k ) {
            if ( item )
            {
                var i, index, limit, curr, next = item.slice();
                
                if ( -1 === offset )
                {
                    // compute prev indexes
                    // find index to move
                    i = k-1;  index = -1;
                    while (0 <= i)
                    {
                        if ( next[i] < n-1 ) {  index=i; break; }
                        i--;
                    }
                    // adjust next indexes after the moved index
                    if (-1 < index)
                    {
                        curr = next[index]+1;
                        for (i=index; i<k; i++) next[i] = curr;
                    }
                    else 
                    { 
                        next = null; 
                    }
                }
                else //if ( 1 === offset )
                {
                    // compute next indexes
                    // find index to move
                    i = k-1;  index = -1;
                    while (0 <= i)
                    {
                        if ( next[i] < n-1 ) {  index=i; break; }
                        i--;
                    }
                    // adjust next indexes after the moved index
                    if (-1 < index)
                    {
                        curr = next[index]+1;
                        for (i=index; i<k; i++) next[i] = curr;
                    }
                    else 
                    { 
                        next = null; 
                    }
                }
                return next;
            }
            return null;
        }
    }
    
    ,first: function( ) {
        var self = this, i, k = self.$k, n = self.$n, item = new Array(k);
        for (i=0; i<k; i++) item[i] = 0;
        return item;
    }
    
    ,last: function( ) {
        var self = this, i, k = self.$k, n = self.$n, 
            item = new Array(k);
        for (i=0; i<k; i++) item[i] = n-1;
        return item;
    }
    
    ,next: CombinatorialIterator[PROTO].adjacent_next
    
    ,prev: CombinatorialIterator[PROTO].adjacent_prev
    
    ,random: function( ) {
        var self = this, n = self.$n, k = self.$k,
            combination = new Array(k), m, M, i, index;
        m=0;  M=n-1;
        for (i=0; i<k; i++)
        { 
            index = rnd(m, M); 
            combination[i] = index; 
            m = index; 
        }
        return combination;
    }
});

// https://en.wikipedia.org/wiki/Partitions
var Partition = Abacus.Partition = Class(CombinatorialIterator, {
    
    // extends and implements CombinatorialIterator
    constructor: function Partition( n ) {
        var self = this;
        if ( !(self instanceof Partition) ) return new Partition(n);
        CombinatorialIterator.call(self, n);
    }
    
    ,__static__: {
         count: function( n ) {
             var p = n > 1 ? 2 : 1, k, m;
             for (k=2; k<n; k++) 
                 for (m=n-k+1; m>=1; m--)
                    p += partitions(n, k, m);
             return p;
         }
        // http://www.artofproblemsolving.com/wiki/index.php/Partition_%28combinatorics%29
        // http://mathworld.wolfram.com/ConjugatePartition.html
        ,conjugate: function( partition ) {
            var l = partition.length, 
                n = partition[0], i, j, p,
                conjugate = new Array(n);
            for (i=0; i<n; i++) conjugate[ i ] = 1;
            for (j=1; j<l; j++)
            {
                i = 0; p = partition[j];
                while ( i < n && p > 0 )
                {
                    conjugate[i++]++;
                    p--;
                }
            }
            return conjugate;
        }
        ,pack: function( partition ) {
            var packed = [], i, l = partition.length, 
                last = partition[0], part = [last, 1];
            for (i=1; i<l; i++)
            {
                if ( last === partition[i] ) part[1]++;
                else
                {
                    packed.push(part);
                    last = partition[i];
                    part = [last, 1];
                }
            }
            packed.push(part);
            return packed;
        }
        ,unpack: function( packed ) {
            var partition = [], i, j, k, v, l = packed.length, cmp;
            for (i=0; i<l; i++)
            {
                cmp = packed[i];
                if (1 === cmp[1] ) partition.push(cmp[0]);
                else
                {
                    k = cmp[1]; v = cmp[0];
                    for(j=0; j<k; j++) partition.push(v);
                }
            }
            return partition;
        }
        ,toCycles: partition2cycles
        ,index: CombinatorialIterator.index
        ,item: CombinatorialIterator.item
        ,adjacent: function( offset, item, n ) {
            if ( item )
            {
                var i, c, p1, p2, sum, rem, 
                    next = item.slice( );
                
                if ( -1 === offset )
                {
                    // compute prev partition
                    if ( next[0] < n )
                    {
                        c = next.length;
                        sum = new Array(c);
                        for (i=0; i<c; i++) sum[i] = next[i] + (i?sum[i-1]:0);
                        i = c-1;
                        while ( i>0 && next[i] === next[i-1] ) i--;
                        if ( i > 0 && 1+sum[i] > num ) i--;
                        next[i]++;
                        next = next.slice(0, i+1);
                        sum = next.reduce(summation, 0);
                        rem = n-sum;
                        while ( rem > 0 )
                        {
                            next.push(1);
                            rem--;
                        }
                    }
                    // if partition is the number itself it is the final partition
                    else 
                    { 
                        next = null; 
                    }
                }
                else //if ( 1 === offset )
                {
                    // compute next partition
                    if ( next[0] > 1 )
                    {
                        c = next.length;
                        // break into a partition with last part reduced by 1 from previous partition series
                        i = c-1;
                        while (i>=0 && 1 === next[i]) i--;
                        p1 = next[i]-1;
                        next = next.slice(0, i+1);
                        next[ i ] = p1;
                        sum = next.reduce(summation, 0);
                        rem = n-sum;
                        while ( rem > 0 )
                        {
                            p2 = rem;
                            if ( p2 > p1 ) 
                            { 
                                p2 = p1;  
                                next.push(p2); 
                            }
                            else 
                            { 
                                next.push(rem); 
                            }
                            rem -= p2;
                        }
                    }
                    // if partition is all ones (so first element is also one) it is the final partition
                    else 
                    { 
                        next = null; 
                    }
                }
                return next;
            }
            return null;
        }
    }
    
    ,first: function( ) {
        var self = this;
        return [ self.$n ]; 
    }
    
    ,last: function( ) {
        var self = this, i, n = self.$n, item = new Array(n); 
        for (i=0; i<n; i++) item[i] = 1;
        return item;
    }
    
    ,next: CombinatorialIterator[PROTO].adjacent_next
    
    ,prev: CombinatorialIterator[PROTO].adjacent_prev
    
    ,random: function( ) {
        var self = this, n = self.$n, tot = self.$total, p,
            parts, nparts = rnd(1, n/*tot*/), partition
        ;
        
        // try to generate partitions that sample uniformly the combinatorial object space
        // i.e. every possible partition is equi-likely to be output (NEEDS CHECK) 
        if ( 1 === nparts ) 
        {  
            partition = [n]; 
        }
        else if ( n === nparts ) 
        { 
            partition = new Array(n);
            for (p=0; p<n; p++) partition[p] = 1;
        }
        else
        {
            parts = new Array(n);
            while ( nparts > 1 )
            {
                p = rnd(1, n-nparts+1);
                if ( !parts[p-1] ) parts[p-1] = [p];
                else parts[p-1].push(p);
                n -= p; 
                nparts--;
            }
            if ( !parts[n-1] ) parts[n-1] = [n];
            else parts[n-1].push(n);
            partition = [ ];
            for (p=parts.length-1; p>=0; p--) if ( parts[p] ) partition = partition.concat(parts[p]);
        }
        return partition;
    }
});
// aliases
Partition.transpose = Partition.conjugate;

var RestrictedPartition = Abacus.RestrictedPartition = Class(CombinatorialIterator, {
    
    // extends and implements CombinatorialIterator
    constructor: function RestrictedPartition( n, k, m ) {
        var self = this, i;
        if ( !(self instanceof RestrictedPartition) ) return new RestrictedPartition(n, k, m);
        self.$m = m;
        CombinatorialIterator.call(self, n, k);
    }
    
    ,__static__: {
         count: partitions
        ,index: CombinatorialIterator.index
        ,item: CombinatorialIterator.item
        ,adjacent: CombinatorialIterator.adjacent
    }
});

// http://en.wikipedia.org/wiki/Power_set
var PowerSet = Abacus.PowerSet = Class(CombinatorialIterator, {
    
    // extends and implements CombinatorialIterator
    constructor: function PowerSet( n ) {
        var self = this;
        if ( !(self instanceof PowerSet) ) return new PowerSet(n);
        CombinatorialIterator.call(self, n);
    }
    
    ,__static__: {
         count: pow2
        ,index: function( subset/*, n*/ ) { 
            var index = 0, i = 0, l = subset.length;
            while ( i < l ) index += (1<<subset[i++])>>>0;
            return index;
        }
        ,item: function( index/*, n*/ ) { 
            var subset = [], i, x = index>>>0;
            while ( 0 !== x )
            {
                subset.push( i=log2msb( x ) );
                x = (x & (~((1<<i)>>>0)>>>0))>>>0;
            }
            return subset;
        }
        ,adjacent: CombinatorialIterator.adjacent
    }
    
    ,first: function( ) {
        return [];
    }
    
    ,last: function( ) {
        var self = this, i, n = self.$n, item = new Array( n ); 
        for (i=0; i<n; i++) item[ i ] = i;
        return item;
    }
});

// export it
return Abacus;
});
