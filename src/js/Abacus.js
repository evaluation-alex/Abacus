/**
*
*   Abacus
*   A combinatorics library for Node/JS, PHP, Python
*   @version: 0.1
*   https://github.com/foo123/Abacus
**/
!function( root, name, factory ) {
"use strict";
// export the module, umd-style (no other dependencies)
var isCommonJS = ("object" === typeof(module)) && module.exports, 
    isAMD = ("function" === typeof(define)) && define.amd, m;

// CommonJS, node, etc..
if ( isCommonJS ) 
    module.exports = (module.$deps = module.$deps || {})[ name ] = module.$deps[ name ] || (factory.call( root, {NODE:module} ) || 1);

// AMD, requireJS, etc..
else if ( isAMD && ("function" === typeof(require)) && ("function" === typeof(require.specified)) && require.specified(name) ) 
    define( name, ['require', 'exports', 'module'], function( require, exports, module ){ return factory.call( root, {AMD:module} ); } );

// browser, web worker, etc.. + AMD, other loaders
else if ( !(name in root) ) 
    (root[ name ] = (m=factory.call( root, {} ) || 1)) && isAMD && define( name, [], function( ){ return m; } );
}(  /* current root */          this, 
    /* module name */           "Abacus",
    /* module factory */        function( exports, undef ) {
"use strict";

var  Abacus
    ,PROTO = 'prototype', CLASS = 'constructor', HAS = 'hasOwnProperty'
    ,slice = Array.prototype.slice, bind = Function.prototype.bind
    ,Extend = Object.create
    ,Merge = function(a, b) {
        for (var p in b) 
            if (b[HAS](p)) a[p] = b[p];
        return a;
    }
    ,Class = function(s, c) {
        if ( 1 === arguments.length )
        {
            c = s;
            s = Object;
        }
        var ctor = c[CLASS];
        if ( c[HAS]('__static__') )
        {
            ctor = Merge(ctor, c.__static__);
            delete c.__static__;
        }
        ctor[PROTO] = Merge(Extend(s[PROTO]), c);
        return ctor;
    }
    
    // utils
    ,rnd = Math.random, round = Math.round, ceil = Math.ceil
    ,floor = Math.floor, exp = Math.exp, log = Math.log, pow = Math.pow
    ,abs = Math.abs, min = Math.min, max = Math.max, sqrt = Math.sqrt
    ,EULER = Math.E, PI = Math.PI, PHI = 1.6180339887498948482045868, SQRT5 = sqrt(5.0)
    ,log2 = Math.log2 || function(x) { return Math.log(x) / Math.LN2; }
    ,rint = function( m, M ) { return round( (M-m)*rnd( ) + m ); }
    // pre-computed tables for fast lookup
    ,FACT_N_4_20 = [24,120,720,5040,40320,362880,3628800,39916800,479001600,6227020800,87178291200,1307674368000,20922789888000,355687428095998,6402373705727994,121645100408832080]
    ,BINOM_N_K_3_23 = [3,6,4,10,10,5,15,20,15,6,21,35,35,21,7,28,56,70,56,28,8,36,84,126,126,84,36,9,45,120,210,252,210,120,45,10,55,165,330,462,462,330,165,55,11,66,220,495,792,924,792,495,220,66,12,78,286,715,1287,1716,1716,1287,715,286,78,13,91,364,1001,2002,3003,3432,3003,2002,1001,364,91,14,105,455,1365,3003,5005,6435,6435,5005,3003,1365,455,105,15,120,560,1820,4368,8008,11440,12870,11440,8008,4368,1820,560,120,16,136,680,2380,6188,12376,19448,24310,24310,19448,12376,6188,2380,680,136,17,153,816,3060,8568,18564,31824,43758,48620,43758,31824,18564,8568,3060,816,153,18,171,969,3876,11628,27132,50388,75582,92378,92378,75582,50388,27132,11628,3876,969,171,19,190,1140,4845,15504,38760,77520,125970,167960,184756,167960,125970,77520,38760,15504,4845,1140,190,20,210,1330,5985,20349,54264,116280,203490,293930,352716,352716,293930,203490,116280,54264,20349,5985,1330,210,21,231,1540,7315,26334,74613,170544,319770,497420,646646,705432,646646,497420,319770,170544,74613,26334,7315,1540,231,22]
    ,PART_N_K_M_32 = [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,3,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,2,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,5,3,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,4,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,4,3,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,3,5,3,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,7,4,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,5,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,3,2,2,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,3,4,3,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,6,5,3,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,5,7,4,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,9,5,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,6,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,2,2,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,3,5,4,3,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,6,6,5,3,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,6,9,7,4,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,7,9,5,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,11,6,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,7,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,3,2,2,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,4,5,4,3,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,5,9,6,5,3,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,9,9,7,4,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,9,12,9,5,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,9,11,6,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,13,7,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,8,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,3,3,3,2,2,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,5,6,5,4,3,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,6,7,9,6,5,3,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,9,13,9,7,4,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,6,13,12,9,5,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,12,15,11,6,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,11,13,7,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,15,8,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,9,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,4,3,3,2,2,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,4,6,6,5,4,3,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,4,9,10,9,6,5,3,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,10,12,13,9,7,4,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,13,18,12,9,5,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,9,17,15,11,6,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,15,18,13,7,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,13,15,8,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,17,9,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,10,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,4,3,3,2,2,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,4,6,8,6,5,4,3,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,8,11,10,9,6,5,3,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,8,15,16,13,9,7,4,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,16,17,18,12,9,5,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,10,18,23,15,11,6,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,12,21,18,13,7,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,18,21,15,8,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,15,17,9,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,19,10,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,11,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,3,4,4,3,3,2,2,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,6,7,8,6,5,4,3,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,9,11,14,10,9,6,5,3,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,7,14,18,16,13,9,7,4,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,13,23,22,18,12,9,5,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,22,23,23,15,11,6,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,14,23,28,18,13,7,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,15,25,21,15,8,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,21,24,17,9,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,17,19,10,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,21,11,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,12,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,4,4,4,3,3,2,2,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,6,8,9,8,6,5,4,3,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,7,13,13,14,10,9,6,5,3,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,7,16,19,22,16,13,9,7,4,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,13,22,27,22,18,12,9,5,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,20,31,29,23,15,11,6,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,10,29,29,28,18,13,7,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,18,28,33,21,15,8,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,18,29,24,17,9,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,24,27,19,10,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,19,21,11,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,23,12,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,13,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,5,4,4,3,3,2,2,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,5,8,9,9,8,6,5,4,3,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,7,12,16,16,14,10,9,6,5,3,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,14,22,22,22,16,13,9,7,4,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,12,26,29,32,22,18,12,9,5,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,20,32,36,29,23,15,11,6,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,27,40,36,28,18,13,7,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,14,36,35,33,21,15,8,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,22,33,38,24,17,9,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,21,33,27,19,10,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,27,30,21,11,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,21,23,12,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,25,13,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13,14,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,19,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,3,4,5,4,4,3,3,2,2,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,4,8,10,11,9,8,6,5,4,3,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,5,13,16,18,16,14,10,9,6,5,3,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,14,23,27,26,22,16,13,9,7,4,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,10,24,35,33,32,22,18,12,9,5,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,20,38,41,42,29,23,15,11,6,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,29,42,46,36,28,18,13,7,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,15,35,49,43,33,21,15,8,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,18,43,41,38,24,17,9,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,26,38,43,27,19,10,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,24,37,30,21,11,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,30,33,23,12,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,23,25,13,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,27,14,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,15,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,4,5,5,4,4,3,3,2,2,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,7,10,11,11,9,8,6,5,4,3,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,11,18,19,21,16,14,10,9,6,5,3,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,12,24,29,30,26,22,16,13,9,7,4,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,8,25,37,42,38,32,22,18,12,9,5,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,17,37,50,46,42,29,23,15,11,6,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,29,52,53,53,36,28,18,13,7,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,38,53,56,43,33,21,15,8,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,20,43,58,50,38,24,17,9,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,22,50,47,43,27,19,10,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,30,43,48,30,21,11,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,27,41,33,23,12,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,33,36,25,13,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,25,27,14,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13,29,15,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,16,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,17,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,19,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,21,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,5,5,5,4,4,3,3,2,2,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,7,10,12,13,11,9,8,6,5,4,3,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,11,17,22,21,21,16,14,10,9,6,5,3,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,12,23,33,34,34,26,22,16,13,9,7,4,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,22,41,46,46,38,32,22,18,12,9,5,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,15,40,55,59,52,42,29,23,15,11,6,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,27,52,67,59,53,36,28,18,13,7,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,40,66,66,64,43,33,21,15,8,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,15,48,64,66,50,38,24,17,9,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,25,51,67,57,43,27,19,10,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,26,57,53,48,30,21,11,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,34,48,53,33,23,12,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,30,45,36,25,13,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,36,39,27,14,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,27,29,15,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,31,16,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,17,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,19,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,3,4,6,5,5,4,4,3,3,2,2,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,5,10,12,13,13,11,9,8,6,5,4,3,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,9,19,22,25,24,21,16,14,10,9,6,5,3,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,9,23,33,39,37,34,26,22,16,13,9,7,4,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,24,40,54,53,51,38,32,22,18,12,9,5,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,14,37,62,67,64,52,42,29,23,15,11,6,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,24,58,75,78,66,53,36,28,18,13,7,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,38,69,84,73,64,43,33,21,15,8,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,51,81,79,75,50,38,24,17,9,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,20,58,75,76,57,43,27,19,10,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,30,59,76,64,48,30,21,11,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,30,64,59,53,33,23,12,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,38,53,58,36,25,13,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,33,49,39,27,14,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,39,42,29,15,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13,29,31,16,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,33,17,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,17,18,19,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,19,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,21,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,23,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,4,5,6,5,5,4,4,3,3,2,2,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,4,9,13,14,15,13,11,9,8,6,5,4,3,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,8,16,25,26,27,24,21,16,14,10,9,6,5,3,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,8,22,37,42,44,41,34,26,22,16,13,9,7,4,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,19,43,56,63,57,51,38,32,22,18,12,9,5,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,11,40,64,80,76,70,52,42,29,23,15,11,6,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,24,56,87,90,84,66,53,36,28,18,13,7,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,36,78,97,97,81,64,43,33,21,15,8,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,51,86,102,87,75,50,38,24,17,9,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,21,63,96,92,86,57,43,27,19,10,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,25,68,86,86,64,48,30,21,11,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,35,67,85,71,53,33,23,12,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,34,71,65,58,36,25,13,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,42,58,63,39,27,14,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,36,53,42,29,15,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,42,45,31,16,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,31,33,17,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,35,18,19,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,19,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,21,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,5,6,6,5,5,4,4,3,3,2,2,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,8,12,15,15,15,13,11,9,8,6,5,4,3,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,6,16,24,30,29,30,24,21,16,14,10,9,6,5,3,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,20,35,47,48,47,41,34,26,22,16,13,9,7,4,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,18,41,65,69,70,62,51,38,32,22,18,12,9,5,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,35,69,86,92,81,70,52,42,29,23,15,11,6,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,19,62,92,110,101,91,66,53,36,28,18,13,7,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,36,78,114,115,104,81,64,43,33,21,15,8,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,49,100,119,117,96,75,50,38,24,17,9,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,64,104,120,101,86,57,43,27,19,10,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,27,75,111,105,97,64,48,30,21,11,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,30,78,97,96,71,53,33,23,12,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,40,75,94,78,58,36,25,13,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,38,78,71,63,39,27,14,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,46,63,68,42,29,15,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,39,57,45,31,16,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13,45,48,33,17,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,33,35,18,19,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,17,37,19,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,19,20,21,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,21,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,23,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,25,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,3,4,6,6,6,5,5,4,4,3,3,2,2,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,7,12,15,17,17,15,13,11,9,8,6,5,4,3,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,14,25,30,34,31,30,24,21,16,14,10,9,6,5,3,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,19,36,49,56,53,51,41,34,26,22,16,13,9,7,4,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,15,41,63,81,78,74,62,51,38,32,22,18,12,9,5,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,34,70,101,104,101,87,70,52,42,29,23,15,11,6,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,17,56,103,121,125,107,91,66,53,36,28,18,13,7,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,31,88,124,142,128,112,81,64,43,33,21,15,8,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,51,102,143,140,125,96,75,50,38,24,17,9,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,64,122,142,137,111,86,57,43,27,19,10,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,21,78,122,138,115,97,64,48,30,21,11,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,33,87,126,118,108,71,53,33,23,12,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,35,88,108,106,78,58,36,25,13,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,45,83,103,85,63,39,27,14,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,42,85,77,68,42,29,15,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,50,68,73,45,31,16,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,42,61,48,33,17,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,48,51,35,18,19,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,35,37,19,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,39,20,21,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,21,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,22,23,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,26,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,4,5,7,6,6,5,5,4,4,3,3,2,2,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,1,5,11,15,17,18,17,15,13,11,9,8,6,5,4,3,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,3,13,23,33,35,37,34,30,24,21,16,14,10,9,6,5,3,4,0,0,0,0,0,0,0,0,0,0,0,0,0,3,16,35,52,59,62,56,51,41,34,26,22,16,13,9,7,4,5,0,0,0,0,0,0,0,0,0,0,0,0,0,1,14,39,68,85,94,85,79,62,51,38,32,22,18,12,9,5,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,30,71,103,123,116,106,87,70,52,42,29,23,15,11,6,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,15,57,106,145,144,136,114,91,66,53,36,28,18,13,7,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,28,83,141,160,160,135,112,81,64,43,33,21,15,8,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,45,117,158,176,155,134,96,75,50,38,24,17,9,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,67,128,172,166,146,111,86,57,43,27,19,10,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,22,79,145,165,157,126,97,64,48,30,21,11,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,27,92,140,156,129,108,71,53,33,23,12,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,39,99,141,131,119,78,58,36,25,13,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,40,98,119,116,85,63,39,27,14,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,50,91,112,92,68,42,29,15,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,46,92,83,73,45,31,16,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,54,73,78,48,33,17,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13,45,65,51,35,18,19,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,51,54,37,19,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,17,37,39,20,21,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,19,41,21,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,21,22,23,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,23,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,25,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,27,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,5,6,7,6,6,5,5,4,4,3,3,2,2,1,2,0,0,0,0,0,0,0,0,0,0,0,0,1,4,10,15,18,19,20,17,15,13,11,9,8,6,5,4,3,2,3,0,0,0,0,0,0,0,0,0,0,0,0,2,10,23,32,39,39,39,34,30,24,21,16,14,10,9,6,5,3,4,0,0,0,0,0,0,0,0,0,0,0,0,2,14,34,53,66,68,67,60,51,41,34,26,22,16,13,9,7,4,5,0,0,0,0,0,0,0,0,0,0,0,0,1,10,37,68,94,101,103,89,79,62,51,38,32,22,18,12,9,5,6,0,0,0,0,0,0,0,0,0,0,0,0,0,4,29,71,113,135,141,125,112,87,70,52,42,29,23,15,11,6,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,52,112,152,174,159,142,114,91,66,53,36,28,18,13,7,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,26,86,150,194,188,173,143,112,81,64,43,33,21,15,8,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,43,114,183,201,197,163,134,96,75,50,38,24,17,9,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,62,148,194,210,183,156,111,86,57,43,27,19,10,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,85,154,202,192,167,126,97,64,48,30,21,11,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,28,95,168,188,177,141,108,71,53,33,23,12,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,33,106,158,174,143,119,78,58,36,25,13,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,45,111,156,144,130,85,63,39,27,14,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,45,108,130,126,92,68,42,29,15,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,55,99,121,99,73,45,31,16,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,50,99,89,78,48,33,17,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,58,78,83,51,35,18,19,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,48,69,54,37,19,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,54,57,39,20,21,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,39,41,21,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,43,22,23,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,22,23,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,25,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,26,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,3,4,6,7,7,6,6,5,5,4,4,3,3,2,2,1,2,0,0,0,0,0,0,0,0,0,0,0,0,3,8,14,18,20,20,20,17,15,13,11,9,8,6,5,4,3,2,3,0,0,0,0,0,0,0,0,0,0,0,1,9,20,34,40,44,42,42,34,30,24,21,16,14,10,9,6,5,3,4,0,0,0,0,0,0,0,0,0,0,0,1,11,31,53,69,76,74,70,60,51,41,34,26,22,16,13,9,7,4,5,0,0,0,0,0,0,0,0,0,0,0,0,9,33,70,98,116,114,110,94,79,62,51,38,32,22,18,12,9,5,6,0,0,0,0,0,0,0,0,0,0,0,0,3,23,69,117,151,157,153,130,112,87,70,52,42,29,23,15,11,6,7,0,0,0,0,0,0,0,0,0,0,0,0,0,9,52,114,171,194,197,170,149,114,91,66,53,36,28,18,13,7,8,0,0,0,0,0,0,0,0,0,0,0,0,0,1,21,82,161,209,230,206,180,143,112,81,64,43,33,21,15,8,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,40,121,198,247,234,212,172,134,96,75,50,38,24,17,9,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,60,148,227,244,234,192,156,111,86,57,43,27,19,10,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,80,181,230,245,211,178,126,97,64,48,30,21,11,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,22,103,181,232,218,188,141,108,71,53,33,23,12,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,35,111,191,211,197,156,119,78,58,36,25,13,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,39,120,176,192,157,130,85,63,39,27,14,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,51,123,171,157,141,92,68,42,29,15,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,50,118,141,136,99,73,45,31,16,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,60,107,130,106,78,48,33,17,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,54,106,95,83,51,35,18,19,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13,62,83,88,54,37,19,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,51,73,57,39,20,21,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,17,57,60,41,21,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,19,41,43,22,23,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,21,45,23,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,23,24,25,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,25,26,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,27,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,29,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,2,4,5,7,7,7,6,6,5,5,4,4,3,3,2,2,1,2,0,0,0,0,0,0,0,0,0,0,0,2,7,13,18,21,22,22,20,17,15,13,11,9,8,6,5,4,3,2,3,0,0,0,0,0,0,0,0,0,0,1,6,19,31,43,46,48,44,42,34,30,24,21,16,14,10,9,6,5,3,4,0,0,0,0,0,0,0,0,0,0,1,9,30,53,74,83,85,79,74,60,51,41,34,26,22,16,13,9,7,4,5,0,0,0,0,0,0,0,0,0,0,0,6,31,66,104,124,132,123,114,94,79,62,51,38,32,22,18,12,9,5,6,0,0,0,0,0,0,0,0,0,0,0,2,21,66,123,163,183,175,162,136,112,87,70,52,42,29,23,15,11,6,7,0,0,0,0,0,0,0,0,0,0,0,0,8,44,116,181,223,223,212,176,149,114,91,66,53,36,28,18,13,7,8,0,0,0,0,0,0,0,0,0,0,0,0,1,18,83,169,239,262,258,219,188,143,112,81,64,43,33,21,15,8,9,0,0,0,0,0,0,0,0,0,0,0,0,0,2,35,118,218,271,290,255,220,172,134,96,75,50,38,24,17,9,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,58,160,250,302,282,251,202,156,111,86,57,43,27,19,10,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,80,184,273,287,272,221,178,126,97,64,48,30,21,11,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,22,100,214,267,280,239,200,141,108,71,53,33,23,12,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,28,122,208,262,244,209,156,119,78,58,36,25,13,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,42,127,214,234,217,171,130,85,63,39,27,14,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,45,134,194,210,171,141,92,68,42,29,15,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,57,135,186,170,152,99,73,45,31,16,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,55,128,152,146,106,78,48,33,17,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,65,115,139,113,83,51,35,18,19,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,58,113,101,88,54,37,19,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,66,88,93,57,39,20,21,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,54,77,60,41,21,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,60,63,43,22,23,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,43,45,23,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,22,47,24,25,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,25,26,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,26,27,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,2,3,5,6,8,7,7,6,6,5,5,4,4,3,3,2,2,1,2,0,0,0,0,0,0,0,0,0,0,1,5,12,17,21,23,23,22,20,17,15,13,11,9,8,6,5,4,3,2,3,0,0,0,0,0,0,0,0,0,0,5,16,31,42,51,51,51,47,42,34,30,24,21,16,14,10,9,6,5,3,4,0,0,0,0,0,0,0,0,0,0,7,25,52,74,90,93,91,82,74,60,51,41,34,26,22,16,13,9,7,4,5,0,0,0,0,0,0,0,0,0,0,5,26,68,105,138,146,145,130,119,94,79,62,51,38,32,22,18,12,9,5,6,0,0,0,0,0,0,0,0,0,0,1,17,62,122,176,201,205,187,167,136,112,87,70,52,42,29,23,15,11,6,7,0,0,0,0,0,0,0,0,0,0,0,5,42,113,196,245,265,246,223,183,149,114,91,66,53,36,28,18,13,7,8,0,0,0,0,0,0,0,0,0,0,0,0,16,74,175,259,305,298,276,226,188,143,112,81,64,43,33,21,15,8,9,0,0,0,0,0,0,0,0,0,0,0,0,2,30,123,232,315,335,323,270,229,172,134,96,75,50,38,24,17,9,10,0,0,0,0,0,0,0,0,0,0,0,0,0,4,52,160,279,337,352,306,260,202,156,111,86,57,43,27,19,10,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,78,202,304,359,330,291,232,178,126,97,64,48,30,21,11,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,101,222,319,331,310,250,200,141,108,71,53,33,23,12,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,29,120,248,304,315,267,222,156,119,78,58,36,25,13,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,35,141,235,292,270,230,171,130,85,63,39,27,14,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,49,143,237,257,237,186,141,92,68,42,29,15,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,51,148,212,228,185,152,99,73,45,31,16,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,63,147,201,183,163,106,78,48,33,17,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,60,138,163,156,113,83,51,35,18,19,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,70,123,148,120,88,54,37,19,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13,62,120,107,93,57,39,20,21,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,70,93,98,60,41,21,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,17,57,81,63,43,22,23,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,19,63,66,45,23,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,21,45,47,24,25,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,23,49,25,26,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,25,26,27,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,27,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,29,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,3,4,6,7,8,7,7,6,6,5,5,4,4,3,3,2,2,1,2,0,0,0,0,0,0,0,0,0,1,4,10,17,21,24,25,25,22,20,17,15,13,11,9,8,6,5,4,3,2,3,0,0,0,0,0,0,0,0,0,3,14,28,44,51,57,55,53,47,42,34,30,24,21,16,14,10,9,6,5,3,4,0,0,0,0,0,0,0,0,0,5,23,50,77,95,104,102,96,86,74,60,51,41,34,26,22,16,13,9,7,4,5,0,0,0,0,0,0,0,0,0,3,24,61,110,142,164,162,154,134,119,94,79,62,51,38,32,22,18,12,9,5,6,0,0,0,0,0,0,0,0,0,1,15,58,127,185,227,233,223,196,173,136,112,87,70,52,42,29,23,15,11,6,7,0,0,0,0,0,0,0,0,0,0,4,35,112,199,272,297,294,261,229,183,149,114,91,66,53,36,28,18,13,7,8,0,0,0,0,0,0,0,0,0,0,0,12,73,177,285,343,358,326,289,234,188,143,112,81,64,43,33,21,15,8,9,0,0,0,0,0,0,0,0,0,0,0,1,28,113,247,347,396,378,344,278,229,172,134,96,75,50,38,24,17,9,10,0,0,0,0,0,0,0,0,0,0,0,0,4,47,169,303,396,412,390,323,270,202,156,111,86,57,43,27,19,10,11,0,0,0,0,0,0,0,0,0,0,0,0,0,7,73,206,344,405,416,357,301,232,178,126,97,64,48,30,21,11,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,101,246,360,416,379,331,262,200,141,108,71,53,33,23,12,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,22,124,260,366,375,348,279,222,156,119,78,58,36,25,13,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,36,141,282,341,350,295,244,171,130,85,63,39,27,14,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,42,160,262,322,296,251,186,141,92,68,42,29,15,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,56,159,260,280,257,201,152,99,73,45,31,16,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,57,162,230,246,199,163,106,78,48,33,17,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,69,159,216,196,174,113,83,51,35,18,19,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,65,148,174,166,120,88,54,37,19,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,75,131,157,127,93,57,39,20,21,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,66,127,113,98,60,41,21,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,74,98,103,63,43,22,23,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,60,85,66,45,23,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,66,69,47,24,25,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,22,47,49,25,26,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,51,26,27,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,26,27,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,28,29,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
    ,FIB_32 = [0,1,1,2,3,5,8,13,21,34,55,89,144,233,377,610,987,1597,2584,4181,6765,10946,17711,28657,46368,75025,121393,196418,317811,514229,832040,1346269]
    ,clamp = function clamp( v, m, M ) { return ( v < m ) ? m : ((v > M) ? M : v); }
    ,array = function( n ) { return new Array(n); }
    ,n_array = function n_array( dims ) {
        var len = dims.shift( ),
            a = len ? new Array( len ) : [ ], i
        ;
        if ( dims.length )
        {
            for (i=0; i<len; i++) a[ i ] = n_array( dims.slice(0) );
        }
        return a;
    }
    ,to_binary_string = function to_binary_string( b ) {
        return b.toString( 2 );
    }
    ,to_fixed_binary_string = function to_fixed_binary_string( l ) {
        return function( b ) {
            var n, bs;
            bs = b.toString( 2 );
            if ( (n = l-bs.length) > 0 ) bs = new Array(n+1).join('0') + bs;
            return bs;
        };
    }
    ,to_fixed_binary_string_32 = to_fixed_binary_string( 32 )
    ,numeric_asc = function( a, b ) {
        return a-b;
    }
    ,numeric_desc = function( a, b ) {
        return b-a;
    }
    ,range = function range( n, options )  {
        var a, i;
        options = options || {};
        a = new Array( n );
        if ( options[HAS]('value') )
        {
            var v = options.value, is_arr_str = !!v.slice;
            for (i=0; i<n; i++) {a[ i ] = is_arr_str ? v.slice() : v;}
        }
        else
        {
            var start = options[HAS]('start') ? parseInt(options.start, 10) : 0,
                step = options[HAS]('step') ? parseInt(options.step, 10) : 1,
                istep = 0;
            for (i=0; i<n; i++) {a[ i ] = istep+start; istep += step;}
        }
        return a;
    }
    // http://stackoverflow.com/questions/6443176/how-can-i-generate-a-random-number-within-a-range-but-exclude-some
    ,rint_exclude = function rint_exclude( m, M, exclude, exclude_count ) {
        exclude_count = exclude_count || exclude.length;
        var i, r = Abacus.rint( m, M - exclude_count );
        // requires excluded items to be sorted ascending
        if ( exclude_count > 0 && r >= exclude[0] )
        {
            r++;
            for (i=1; i<exclude_count; i++)
            {
                // requires excluded items to be sorted ascending
                if ( r < exclude[i] ) break;
                r++;
            }
        }
        return r;
    }
    // http://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle
    // https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle#Sattolo.27s_algorithm
    ,shuffle = function shuffle( a, cyclic, copied ) {
        var N, perm, swap, ac, offset;
        ac = true === copied ? a.slice() : a;
        offset = true === cyclic ? 1 : 0;
        N = ac.length;
        while ( offset < N-- )
        { 
            perm = Abacus.rint( 0, N-offset ); 
            if ( N === perm ) continue;
            swap = ac[ N ]; 
            ac[ N ] = ac[ perm ]; 
            ac[ perm ] = swap; 
        }
        // in-place or copy
        return ac;
    }
    ,rshuffle = function rshuffle( a, m, M ) {
        var N, perm, swap, ac, offset;
        ac = a; N = M-m+1;
        while ( N-- )
        { 
            perm = Abacus.rint( m, N ); 
            if ( N === perm ) continue;
            swap = ac[ N ]; 
            ac[ N ] = ac[ perm ]; 
            ac[ perm ] = swap; 
        }
        // in-place or copy
        return ac;
    }
    // http://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle
    // eXtended shuffle variation to shuffle only parts of array
    // while leaving other parts unaltered
    ,xshuffle = function xshuffle( a, o, copied ) {
        var n, k, i, j, N, perm, swap, inc, b, ac, offset;
        
        o = o || {};
        if ( arguments.length < 3 ) copied = o.copied;
        ac = true === copied ? a.slice() : a;
        offset = true === o.cyclic ? 1 : 0;
        
        if ( o[HAS]('included') )
        {
            inc = o.included.slice( );
        }
        else if ( o[HAS]('included_range') )
        {
            N = a.length; b = o.included_range; k = b.length;
            inc = []; n=0; j=0;
            while ( n < N )
            {
                if ( j<k && (n>=b[j] && (j+1>=k || n<=b[j+1])) ) inc.push( n );
                else j+=2;
                n++;
            }
        }
        else if ( o[HAS]('excluded') )
        {
            N = a.length; b = o.excluded; k = b.length;
            inc = new Array(N-k); n=0; i=0; j=0;
            while ( n < N )
            {
                if ( j>=k || n<b[j] ) inc[i++] = n;
                else j++;
                n++;
            }
        }
        else if ( o[HAS]('excluded_range') )
        {
            N = a.length; b = o.excluded_range; k = b.length;
            inc = []; n=0; j=0;
            while ( n < N )
            {
                if ( j<k && n>=b[j] )
                {
                    n = j+1<k ? b[j+1] : n; 
                    j+=2;
                }
                else inc.push( n );
                n++;
            }
        }
        else
        {
            inc = [];
        }
        N = inc.length;
        while ( offset < N-- )
        { 
            perm = Abacus.rint( 0, N-offset ); 
            if ( N === perm ) continue;
            swap = ac[ inc[N] ]; 
            ac[ inc[N] ] = ac[ inc[perm] ]; 
            ac[ inc[perm] ] = swap; 
        }
        // in-place or copy
        return ac;
    }
    // http://stackoverflow.com/a/32035986/3591273
    ,random_pick = function random_pick( a, k, non_destructive ) {
        var picked, backup, i, selected, value, n = a.length;
            k = min( k, n );
            picked = new Array( k ); 
            backup = new Array( k );
        
        non_destructive = false !== non_destructive;
        // partially shuffle the array, and generate unbiased selection simultaneously
        // this is a variation on fisher-yates-knuth shuffle
        for (i=0; i<k; i++) // O(k) times
        { 
            selected = Abacus.rint( 0, --n ); // unbiased sampling n * n-1 * n-2 * .. * n-k+1
            value = a[ selected ];
            a[ selected ] = a[ n ];
            a[ n ] = value;
            backup[ i ] = selected;
            picked[ i ] = value;
        }
        if ( non_destructive )
        {
            // restore partially shuffled input array from backup
            for (i=k-1; i>=0; i--) // O(k) times
            { 
                selected = backup[ i ];
                value = a[ n ];
                a[ n ] = a[ selected ];
                a[ selected ] = value;
                n++;
            }
        }
        return picked;
    }
    ,random_pick_include = function random_pick_include( a, k, included, non_destructive ) {
        var picked, backup, i, selected, value, n = a.length, index, ni = included.length;
            k = min( k, n );
            picked = new Array( k );
            backup = new Array( k );
        
        non_destructive = false !== non_destructive;
        // partially shuffle the array, and generate unbiased selection simultaneously
        // this is a variation on fisher-yates-knuth shuffle
        for (i=0; i<k; i++) // O(k) times
        { 
            index = Abacus.rint( 0, --ni ); // unbiased sampling n * n-1 * n-2 * .. * n-k+1
            selected = included[ index ];
            value = a[ selected ];
            included[ index ] = included[ ni ];
            included[ ni ] = selected;
            backup[ i ] = index;
            picked[ i ] = value;
        }
        if ( non_destructive )
        {
            // restore partially shuffled input array from backup
            for (i=k-1; i>=0; i--) // O(k) times
            { 
                index = backup[ i ];
                selected = included[ ni ];
                included[ ni ] = included[ index ];
                included[ index ] = selected;
                ni++;
            }
        }
        return picked;
    }
    ,radix = function radix( n, b, d ) {
        d = d || ceil(log(n)/log(b) || 1);
        var digits = new Array(d), i = d-1, r;
        digits[ i-- ] = r = n % b;
        n = ~~((n-r)/b);
        while ( i >= 0 && n > 0 )
        {
            digits[ i-- ] = r = n % b;
            n = ~~((n-r)/b);
        }
        while ( i >= 0 ) digits[ i-- ] = 0;
        digits.base = b;
        return digits;
    }
    ,add = function add( x, y ) {
        return x+y;
    }
    ,mul = function mul( x, y ) {
        return x*y;
    }
    // http://jsperf.com/functional-loop-unrolling/2
    // http://jsperf.com/functional-loop-unrolling/3
    ,sum = function sum( a ) {
        var i, l=a.length, r=l&15, q=r&1, fv=q?a[0]:0;
        for (i=q; i<r; i+=2)  fv += a[i]+a[i+1];
        for (i=r; i<l; i+=16) fv += a[i]+a[i+1]+a[i+2]+a[i+3]+a[i+4]+a[i+5]+a[i+6]+a[i+7]+a[i+8]+a[i+9]+a[i+10]+a[i+11]+a[i+12]+a[i+13]+a[i+14]+a[i+15];
        return fv;
    }
    ,product = function product( a ) {
        var i, l=a.length, r=l&15, q=r&1, fv=q?a[0]:1;
        for (i=q; i<r; i+=2)  fv *= a[i]*a[i+1];
        for (i=r; i<l; i+=16) fv *= a[i]*a[i+1]*a[i+2]*a[i+3]*a[i+4]*a[i+5]*a[i+6]*a[i+7]*a[i+8]*a[i+9]*a[i+10]*a[i+11]*a[i+12]*a[i+13]*a[i+14]*a[i+15];
        return fv;
    }
    ,operate = function operate( a, f, f0 ) {
        var i, l=a.length, r=l&15, q=r&1, fv=q?f(f0,a[0]):f0;
        for (i=q; i<r; i+=2)  fv = f(f(fv,a[i]),a[i+1]);
        for (i=r; i<l; i+=16) fv = f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(fv,a[i]),a[i+1]),a[i+2]),a[i+3]),a[i+4]),a[i+5]),a[i+6]),a[i+7]),a[i+8]),a[i+9]),a[i+10]),a[i+11]),a[i+12]),a[i+13]),a[i+14]),a[i+15]);
        return fv;
    }
    ,map = function map( a, f ) {
        var i, l=a.length, r=l&15, q=r&1, fv=new Array(l);
        if ( q ) fv[0] = f(a[0]);
        for (i=q; i<r; i+=2)
        { 
            fv[i  ] = f(a[i  ]);
            fv[i+1] = f(a[i+1]);
        }
        for (i=r; i<l; i+=16)
        {
            fv[i  ] = f(a[i  ]);
            fv[i+1] = f(a[i+1]);
            fv[i+2] = f(a[i+2]);
            fv[i+3] = f(a[i+3]);
            fv[i+4] = f(a[i+4]);
            fv[i+5] = f(a[i+5]);
            fv[i+6] = f(a[i+6]);
            fv[i+7] = f(a[i+7]);
            fv[i+8] = f(a[i+8]);
            fv[i+9] = f(a[i+9]);
            fv[i+10] = f(a[i+10]);
            fv[i+11] = f(a[i+11]);
            fv[i+12] = f(a[i+12]);
            fv[i+13] = f(a[i+13]);
            fv[i+14] = f(a[i+14]);
            fv[i+15] = f(a[i+15]);
        }
        return fv;
    }
    ,filter = function filter( a, f ) {
        var i, l=a.length, r=l&15, q=r&1, fv=[];
        if ( q && f(a[0]) ) fv.push(a[0]);
        for (i=q; i<r; i+=2)
        { 
            if ( f(a[i  ]) ) fv.push(a[i  ]);
            if ( f(a[i+1]) ) fv.push(a[i+1]);
        }
        for (i=r; i<l; i+=16)
        {
            if ( f(a[i  ]) ) fv.push(a[i  ]);
            if ( f(a[i+1]) ) fv.push(a[i+1]);
            if ( f(a[i+2]) ) fv.push(a[i+2]);
            if ( f(a[i+3]) ) fv.push(a[i+3]);
            if ( f(a[i+4]) ) fv.push(a[i+4]);
            if ( f(a[i+5]) ) fv.push(a[i+5]);
            if ( f(a[i+6]) ) fv.push(a[i+6]);
            if ( f(a[i+7]) ) fv.push(a[i+7]);
            if ( f(a[i+8]) ) fv.push(a[i+8]);
            if ( f(a[i+9]) ) fv.push(a[i+9]);
            if ( f(a[i+10]) ) fv.push(a[i+10]);
            if ( f(a[i+11]) ) fv.push(a[i+11]);
            if ( f(a[i+12]) ) fv.push(a[i+12]);
            if ( f(a[i+13]) ) fv.push(a[i+13]);
            if ( f(a[i+14]) ) fv.push(a[i+14]);
            if ( f(a[i+15]) ) fv.push(a[i+15]);
        }
        return fv;
    }
    ,each = function each( a, f ) {
        var i, l=a.length, r=l&15, q=r&1;
        if ( q ) f(a[0]);
        for (i=q; i<r; i+=2)
        { 
            f(a[i  ]);
            f(a[i+1]);
        }
        for (i=r; i<l; i+=16)
        {
            f(a[i  ]);
            f(a[i+1]);
            f(a[i+2]);
            f(a[i+3]);
            f(a[i+4]);
            f(a[i+5]);
            f(a[i+6]);
            f(a[i+7]);
            f(a[i+8]);
            f(a[i+9]);
            f(a[i+10]);
            f(a[i+11]);
            f(a[i+12]);
            f(a[i+13]);
            f(a[i+14]);
            f(a[i+15]);
        }
        return a;
    }
    ,id = function id( x ) {
        return x;
    }
    ,curry = function curry( f ) {
        var args0 = slice.call(arguments, 1);
        return function( ) {
            var arg1 = arguments;
            return args1.length ? f.apply( this, args0.concat(args1) ) : f.apply( this, args0 );
        };
    }
    ,curry_right = function curry_right( f ) {
        var args1 = slice.call(arguments, 1);
        return function( ) {
            var arg0 = arguments;
            return args0.length ? f.apply( this, slice.call(args0).concat(args1) ) : f.apply( this, args1 );
        };
    }
    ,intersection = function intersect_sorted2( a, b ) {
        var ai = 0, bi = 0, intersection = [ ],
            al = a.length, bl = b.length;
        // assume a, b lists are sorted ascending
        while( ai < al && bi < bl )
        {
            if      ( a[ai] < b[bi] )
            { 
                ai++; 
            }
            else if ( a[ai] > b[bi] )
            { 
                bi++; 
            }
            else // they're equal
            {
                intersection.push( a[ ai ] );
                ai++; bi++;
            }
        }
        return intersection;
    }
    ,difference = function difference_sorted2( a, b ) {
        var ai = 0, bi = 0, difference = [ ],
            al = a.length, bl = b.length;
        // assume a, b lists are sorted ascending
        while( ai < al && bi < bl )
        {
            if      ( a[ai] < b[bi] )
            { 
                difference.push( a[ ai ] );
                ai++; 
            }
            else if ( a[ai] > b[bi] )
            { 
                difference.push( b[ bi ] );
                bi++; 
            }
            else // they're equal
            {
                ai++; bi++;
            }
        }
        return difference;
    }
    ,union = function merge_unique_sorted2( a, b ) {
        var ai = 0, bi = 0, merged = [ ], last,
            al = a.length, bl = b.length;
        // assume a, b lists are sorted ascending, even with duplicate values
        while( ai < al && bi < bl )
        {
            if      (merged.length) // handle any possible duplicates inside SAME list
            {
                if (a[ai] === last)
                {
                    ai++; continue;
                }
                else if (b[bi] === last)
                {
                    bi++; continue;
                }
            }
            if      ( a[ai] < b[bi] )
            { 
                merged.push( last=a[ai++] ); 
            }
            else if ( a[ai] > b[bi] )
            { 
                merged.push( last=b[bi++] ); 
            }
            else // they're equal, push one unique
            {
                merged.push( last=a[ ai ] );
                ai++; bi++;
            }
        }
        while ( ai < al ) if (a[ai++] !== last) merged.push( last=a[ai-1] ); 
        while ( bi < bl ) if (b[bi++] !== last) merged.push( last=b[bi-1] ); 
        return merged;
    }
    ,complement = function complement( alpha, N ) {
        var beta, n, a, b, k = alpha.length;
        beta = new Array( N-k ); n=0; a=0; b=0;
        while ( n < N )
        {
            if ( a>=k || n<alpha[a] ) beta[b++] = n;
            else a++;
            n++;
        }
        return beta;
    }
    ,kronecker = function kronecker( /* var args here */ ) {
        var k, a, r, l, i, j, vv, tensor,
            v = arguments, nv = v.length,
            kl, product;
        
        if ( !nv ) return [];
        kl = v[0].length;
        for (k=1; k<nv; k++) kl *= v[ k ].length;
        product = new Array( kl );
        
        for (k=0; k<kl; k++)
        {
            tensor = [ ];
            for (r=k,a=nv-1; a>=0; a--)
            {
                l = v[ a ].length;
                i = r % l;
                r = ~~(r / l);
                vv = v[ a ][ i ];
                if ( vv instanceof Array )
                {
                    // kronecker can be re-used to create higher-order products
                    // i.e kronecker(alpha, beta, gamma) and kronecker(kronecker(alpha, beta), gamma)
                    // should produce exactly same results
                    for (j=vv.length-1; j>=0; j--)
                        tensor.unshift( vv[ j ] );
                }
                else
                {
                    tensor.unshift( vv );
                }
            }
            product[ k ] = tensor;
        }
        return product;
    }
    ,cartesian = function cartesian( /* var args here */ ) {
    }
    ,cycle2swaps = function( cycle ) {
        var swaps = [], c = cycle.length, j;
        if ( c > 1 ) for (j=c-1; j>=1; j--) swaps.push([cycle[0],cycle[j]])
        return swaps;
    }
    ,partition2cycles = function( partition ) {
        var cycles = [], cycle, i,
            pi, pl = partition.length, p,
            current = 0;
        for (pi=0; pi<pl; pi++)
        {
            p = partition[pi];
            cycle = new Array( p );
            // lexicographic cycle(s)
            for (i=0; i<p; i++) cycle[i] = current++;
            cycles.push(cycle);
        }
        return cycles;
    }
    ,factorial = function factorial( n ) {
        if ( 0 > n ) return 0;
        else if ( 2 > n ) return 1;
        // 2=>2 or 3=>6
        else if ( 4 > n ) return n<<(n-2);
        // use fast pre-computed lookup table
        else if ( 20 > n ) return FACT_N_4_20[ n-4 ];
        // compute it directly
        else
        {
            // use logarithmic sums to avoid overflows etc..
            var logFn = log(FACT_N_4_20[ 15/*+4*/ ]);
            while ( n >= 20 ) logFn += log(n--);
            return floor(0.5+exp(logFn));
        }
    }
    // http://en.wikipedia.org/wiki/Derangement
    ,subfactorial = function subfactorial( n ) {
        return floor(0.5 + factorial( n )/EULER);
    }
    // http://en.wikipedia.org/wiki/Binomial_coefficient
    ,binomial = function binomial( n, k ) {
        if ( k > n-k ) k = n - k; // take advantage of symmetry
        if ( 0 > k || 1 > n ) return 0;
        else if ( 0 === k || 1 === n ) return 1;
        else if ( 1 === k ) return n;
        // use fast pre-computed lookup table
        else if ( 23 > n ) return BINOM_N_K_3_23[ ((n-3)*(n-2)>>>1) + k-2 ];
        // compute it directly
        else
        {
            var n_k = n-k, Cnk = 1 + n_k, i;
            for (i=2; i<=k; i++) Cnk *= 1 + n_k/i;
            return floor(0.5+Cnk);
        }
    }
    // recursively compute the partition count using the recursive relation:
    // http://en.wikipedia.org/wiki/Partition_(number_theory)#Partition_function
    // http://www.programminglogic.com/integer-partition-algorithm/
    ,partitions = function partitions( n, k, m ) {
        // compute number of integer partitions of n
        // into exactly k parts
        // having m as max value
        // m + k-1 <= n <= k*m
        if ( (m === n && 1 === k) || (k === n && 1 === m) ) return 1;
        if ( m+k>n+1 || k*m<n ) return 0;
        // use fast pre-computed lookup table
        if ( n <= 32 && k <= 32 && m <= 32 ) return PART_N_K_M_32[((n-1)<<10)+((k-1)<<5)+m-1];
        // compute it directly
        var j, jmax=min(m,n-m-k+2), jmin=max(1,ceil((n-m)/(k-1))), p = 0;
        for (j=jmin; j<=jmax; j++) p += partitions( n-m, k-1, j );
        return p;
    }
    ,pow2 = function( n ) {
        return (1 << n)>>>0;
    }
    ,powNK = function( n, k ) {
        return pow(n, k);
    }
    // http://en.wikipedia.org/wiki/Fibonacci_number
    ,fibonacci = function( n ) {
        if ( 0 > n ) return 0;
        // use lookup table
        if ( 32 > n ) return FIB_32[ n ];
        // compute it directly
        if ( 64 > n )
        {
            var f0 = FIB_32[30], f1 = FIB_32[31], f2;
            while ( n-- > 31 ) { f2 = f0+f1; f0 = f1; f1 = f2; }
            return f2;
        }
        // compute it approximately
        return floor(0.5+(pow(PHI, n)-pow(1-PHI, n))/SQRT5);
    }
    // http://rosettacode.org/wiki/Convert_decimal_number_to_rational#PHP
    ,ration = function(val, epsilon) {
        if ( undef === epsilon ) epsilon = 1.e-6;
        if ( val === round(val) ) 
        {
            // integer
            return [round(val), 1];
        }

        var h1 = 1,
            h2 = 0,
            k1 = 0,
            k2 = 1,
            a, aux, b = 1 / val;

        do {
            b = 1 / b;
            a = floor(b);
            aux = h1;
            h1 = a * h1 + h2;
            h2 = aux;
            aux = k1;
            k1 = a * k1 + k2;
            k2 = aux;
            b -= a;
        } while (abs(val-h1/k1) > val * epsilon);
        return [h1,k1];
    }
    // https://en.wikipedia.org/wiki/Extended_Euclidean_algorithm
    // https://en.wikipedia.org/wiki/Integer_relation_algorithm
    // http://userpages.umbc.edu/~rcampbel/NumbThy/Class/Programming/JavaScript/
    ,xgcd = function( a, b ) {
        var a1=1, b1=0, a2=0, b2=1, aneg=1, bneg=1, tmp, q;
        if (a < 0) { a = -a; aneg = -1; };
        if (b < 0) { b = -b; bneg = -1; };
        if (b > a) { tmp = a; a = b; b = tmp; };
        while ( true ) 
        {
            q = -floor(a / b); a %= b; a1 += q*a2; b1 += q*b2;
            if ( 0 === a )  return [b*bneg, a2, b2]; 
            q = -floor(b / a); b %= a; a2 += q*a1; b2 += q*b1;
            if ( 0 === b ) return [a*aneg, a1, b1];
        }
        return [];
    }
    // compute (eucliean) metric without overflow/underflow
    ,eudist = function( x, y ) {
        var r, t;
        // avoid oveflows
        if ( 0 > x ) x = -x;
        if ( 0 > y ) y = -y;
        if ( 0.0 == x ) r = y;
        else if ( 0.0 == y ) r = x;
        else if ( x > y ) { t = y/x;  r = x*sqrt(1.0+t*t); }
        else { t = x/y;  r = y*sqrt(1.0+t*t); }
        return r;
    }
    ,NotImplemented = function( ) { throw new Error("Method not implemented"); }
    ,List, BitArray, CombinatorialIterator, Permutation, Derangement
    ,Combination, CombinationRepeat, Partition, RestrictedPartition, PowerSet, Tensor
;

Abacus = {
    VERSION: "0.1"
    
    ,rnd: rnd
    ,rint: rint
    ,rint_exclude: rint_exclude
    ,clamp: clamp
    ,radix: radix
    
    ,Factorial: factorial
    ,SubFactorial: subfactorial
    ,Binomial: binomial
    ,Partitions: partitions
    ,Fibonacci: fibonacci
    ,Bell: NotImplemented
    ,Catalan: NotImplemented
};

List = Abacus.List = {
     array: array
    ,n_array: n_array
    ,range: range
    
    ,shuffle: shuffle
    ,xshuffle: xshuffle
    ,pick: random_pick
    ,pick_include: random_pick_include
    
    ,id: id
    ,curry: curry
    ,curry_right: curry_right
    ,sum: sum
    ,product: product
    ,operate: operate
    ,map: map
    ,filter: filter
    ,each: each
    ,intersection: intersection
    ,union: union
    ,difference: difference
    ,add: add
    ,mul: mul
    ,complement: complement
    ,kronecker: kronecker
    ,cartesian: cartesian
};

BitArray = Abacus.BitArray = Class({
    
    constructor: function BitArray(n) {
        var self = this;
        if ( !(self instanceof BitArray) ) return new BitArray(n);
        self.length = n;
        self.bits = new Uint32Array( ceil(n/32) );
    }
    
    ,length: 0
    ,bits: null
    
    ,dispose: function( ) {
        var self = this;
        self.length = null;
        self.bits = null;
        return self;
    }
    
    ,clone: function( ) {
        var self = this, c = new BitArray(self.length);
        c.bits = new Uint32Array( self.bits );
        return c;
    }
    
    ,fromArray: function( b ) {
        var self = this;
        self.bits = new Uint32Array( b );
        return self;
    }
    
    ,toArray: function( ) {
        return Array[PROTO].slice.call( this.bits );
    }
    
    ,toString: function( ) {
        return this.toArray( ).map( to_fixed_binary_string_32 ).join( '' );
    }
    
    ,reset: function( ) {
        var self = this, bits = self.bits, len = bits.length, i;
        for (i=0; i<len; i++) bits[i] = 0;
        return self;
    }
    
    ,isset: function( bit ) {
        return !!(this.bits[bit>>>5] & (1<<(bit&31)));
    }
    
    ,set: function( bit ) {
        var self = this;
        self.bits[bit>>>5] |= 1<<(bit&31);
        return self;
    }
    
    ,unset: function( bit ) {
        var self = this;
        self.bits[bit>>>5] &= ~(1<<(bit&31));
        return self;
    }
    
    ,toggle: function( bit ) {
        var self = this;
        self.bits[bit>>>5] ^= 1<<(bit&31);
        return self;
    }
});

// Abacus.CombinatorialIterator, Combinatorial Base Class and Iterator Interface
CombinatorialIterator = Abacus.CombinatorialIterator = Class({
    
    constructor: function CombinatorialIterator( n ) {
        var self = this, klass;
        if ( !(self instanceof CombinatorialIterator) ) return new CombinatorialIterator(n);
        klass = self[CLASS];
        self.n = n||0;
        self.$total = klass.count( self.n );
        self.rewind( );
    }
    
    ,__static__: {
         count: NotImplemented
        ,index: NotImplemented
        /*
http://maths-people.anu.edu.au/~brent/pd/Arndt-thesis.pdf, pp 57
Technique that uses unranking. Let C(n) be the number of size-n combinatorial objects of a
certain type satisfying a recurrence relation of the form
C(n) = u(n)C(n-1) + v(n)C(n-2) + w(n)C(n-3) + ..
where the coeficient u(n), v(n), w(n), . . . are nonnegative. 
We call the objects corresponding to the term u(n)C(n-1), objects of the first type, those
corresponding to v(n)C(n-2) objects of the second type, and so on. An algorithm
for unranking can be given as follows:
Algorithm Unrank. Generate the r-th (0<=r<C(n)) combinatorial object.
1. Set U = u(n)C(n-1), V = v(n)C(n-2), W = W(n)C(n-3), etc.
2. If r<U then return the r-th object of the first type of size n-1 (recursion).
3. If r<U+V then return the (r-U)-th object of the second type of size n-2 (recursion).
4. If r<U+V+W then return the (r-U-V)-th object of the third type of size n-3 (recursion).
5. (And so on).
A random unbiased object can be generated by calling this algorithm with parameter
r := Z(C(n)) (0<=r<C(n)).
        */
        ,item: NotImplemented
        ,first: NotImplemented
        ,last: NotImplemented
        ,adjacent: function( offset, item, n ) {
            var klass = this;
            if ( -1 !== offset && 1 !== offset ) offset = 1;
            return item ? klass.item( klass.index(item, n)+offset, n ) : null;
        }
        ,rand: NotImplemented
        ,fromStochasticMatrix: NotImplemented
    }
    
    ,n: 0
    ,$total: 0
    ,$index: null
    ,$current: null
    ,$prev: false
    ,$next: false
    ,$traversed: null
    ,$rindex: 0
    ,$counters: null
    
    ,dispose: function( ) {
        var self = this;
        self.n = null;
        self.$total = 0;
        self.$index = null;
        self.$current = null;
        self.$prev = false;
        self.$next = false;
        self.$rindex = null;
        self.$counters = null;
        if ( self.$traversed )
        {
            self.$traversed.dispose( );
            self.$traversed = null;
        }
        return self;
    }
    
    ,$store: function( ) {
        var self = this;
        return [self.$index, self.$current, self.$prev, self.$next];
    }
    
    ,$restore: function( state ) {
        var self = this;
        if ( state )
        {
        self.$index = state[0];
        self.$current = state[1];
        self.$prev = state[2];
        self.$next = state[3];
        }
        return self;
    }
    
    ,total: function( ) {
        return this.$total;
    }
    
    ,current: function( ) {
        return this.$current;
    }
    
    ,index: function( index ) {
        var self = this;
        if ( arguments.length )
        {
            if ( 0 > index ) index += self.$total;
            if ( index >=0 && index < self.$total ) self.$current = self.get( self.$index = index );
            return self;
        }
        return self.$index;
    }
    
    ,get: function( index ) {
        var self = this, tot = self.$total, klass = self[CLASS];
        if ( !arguments.length ) return self.$current;
        if ( 0 > index ) index += tot;
        if ( index >= 0 && index < tot )
        {            
            if ( 0 === index ) return klass.first( self.n );
            else if ( tot === index+1 ) return klass.last( self.n );
            return klass.item( index, self.n, self.$total );
        }
        return null;
    }
    
    ,range: function( start, end ) {
        var self = this, tmp, tot = self.$total, range, count, i, prev, dir = 1;
        if ( arguments.length < 1 )
        {
            start = 0;
            end = tot-1;
        }
        else if ( arguments.length < 2 )
        {
            end = tot-1;
        }
        if ( start < 0 ) start += tot;
        if ( end < 0 ) end += tot;
        if ( start > end )
        {
            tmp = start;
            start = end;
            end = tmp;
            dir = -1;
        }
        if ( start < 0 ) start = 0;
        if ( end >= tot ) end = tot-1;
        if ( start<=end )
        {
            // store current iterator state
            prev = self.$store( );
            self.$index = start; 
            self.$current = self.get( start );
            count = end - start; range = new Array( count+1 );
            if ( 0 > dir ) for (i=count; i>=0; i--) range[ i ] = self.next( );
            else for (i=0; i<=count; i++) range[ i ] = self.next( );
            // restore previous iterator state
            self.$restore( prev );
        }
        else
        {
            range = [];
        }
        return range;
    }
    
    ,rewind: function( ) {
        var self = this, klass = self[CLASS];
        self.$index = 0;
        self.$current = klass.first( self.n );
        self.$prev = false;
        self.$next = self.$index < self.$total;
        return self;
    }
    
    ,hasNext: function( ) {
        return this.$next;
    }
    
    ,next: function( ) {
        var self = this, klass = self[CLASS], current = self.$current;
        // compute next
        if ( self.$index+1 < self.$total ) 
        {
            self.$next = true;
            self.$current = klass.item( ++self.$index, self.n, self.$total );
        }
        else
        {
            self.$next = false;
        }
        return current;
    }
    
    ,forward: function( ) {
        var self = this, klass = self[CLASS];
        self.$index = self.$total-1;
        self.$current = klass.last( self.n ); 
        self.$prev = self.$index >= 0;
        self.$next = false;
        return self;
    }
    
    ,hasPrev: function( ) { 
        return this.$prev;
    }
    
    ,prev: function( ) {
        var self = this, klass = self[CLASS], current = self.$current;
        // compute prev
        if ( self.$index-1 >= 0 ) 
        {
            self.$prev = true;
            self.$current = klass.item( --self.$index, self.n, self.$total );
        }
        else
        {
            self.$prev = false;
        }
        return current;
    }
    
    ,adjacentNext: function( ) {
        var self = this, klass = self[CLASS], item = self.$current;
        var next = klass.adjacent( 1, item, self.n );
        if ( !next ) 
        {
            self.$next = false;
        }
        else
        {            
            self.$current = next;
            self.$index++;
        }
        return item;
    }
    
    ,adjacentPrev: function( ) {
        var self = this, klass = self[CLASS], item = self.$current;
        var next = klass.adjacent( -1, item, self.n );
        if ( !next ) 
        {
            self.$prev = false;
        }
        else
        {            
            self.$current = next;
            self.$index--;
        }
        return item;
    }
    
    ,random: function( ) {
        var self = this, klass = self[CLASS];
        return klass.rand( self.n, self.$total );
    }
    
    ,randomise: function( ) {
        var self = this;
        // lazy init
        if ( !self.$traversed ) self.$traversed = new BitArray( self.$total );
        else self.$traversed.reset( );
        self.$rindex = 0;
        return self;
    }
    
    ,randomIndex: function( m, M ) {
        var self = this, argslen = arguments.length;
        if ( 0 === argslen )
        {
            m = 0;
            M = self.$total-1;
        }
        else if ( 1 === argslen )
        {
            m = m || 0;
            M = self.$total-1;
        }
        return Abacus.rint( m, M );
    }
    
    ,hasRandomNext: function( ) {
        return this.$rindex < this.$total;
    }
    
    // http://stackoverflow.com/questions/28990820/iterator-to-produce-unique-random-order
    // see also: https://en.wikipedia.org/wiki/Reservoir_sampling
    ,randomNext: function( ) {
        var self = this, r, traversed = self.$traversed, M;
        if ( self.$rindex < self.$total )
        {
            // http://stackoverflow.com/a/3724708/3591273
            // http://stackoverflow.com/a/2394292/3591273
            // variation, based on Floyd's random sample algorithm
            /*
            initialize set S to empty, M = N
            for J := N-M(=0) to N-1 do
                T := RandInt(0, J)
                if T is not in S then
                    insert T in S
                else
                    insert J in S            
            */
            /*M = self.$total-1-self.$rindex;
            r = self.randomIndex( 0, M );
            if ( traversed.isset( r ) ) r = self.$total-1;
            while ( r>0 && traversed.isset( r ) ) r--;*/
            // get next un-traversed index, reject if needed
            while ( traversed.isset( r = self.randomIndex( ) ) ) ;
            traversed.set( r );
            self.$rindex++;
            //console.log(traversed.toString());
            return self.get( r );
        }
        else if ( self.$traversed )
        {
            self.$traversed.dispose( );
            self.$traversed = null;
        }
        return null;
    }
    
    ,stochastise: function( ) {
        var self = this;
        self.$counters = [];
        return self;
    }
    
    // singly-stochastic
    ,stochastic: function( P ) {
        var self = this, klass = self[CLASS];
        return klass.fromStochasticMatrix( P, self.n, null, self.$total );
    }
    
    // doubly-stochastic
    ,stochastic2: function( P, C ) {
        var self = this, klass = self[CLASS];
        if ( null == self.$counters ) self.$counters = C || [];
        return klass.fromStochasticMatrix( P, self.n, self.$counters, self.$total );
    }
    
    ,all: function( dir, overwrite ) {
        var self = this, all = [], prev, PUSH;
        overwrite = true === overwrite;
        dir = dir || 1;
        PUSH = 0 > dir ? "unshift" : "push";
        // store current iterator state
        if ( !overwrite ) prev = self.$store( );
        self.rewind( );
        while ( self.hasNext( ) ) all[PUSH]( self.next( ) );
        // restore previous iterator state
        if ( !overwrite ) self.$restore( prev );
        return all;
    }
});

// https://en.wikipedia.org/wiki/Permutations
Permutation = Abacus.Permutation = Class(CombinatorialIterator, {
    
    // extends and implements CombinatorialIterator
    constructor: function Permutation( n ) {
        var self = this;
        if ( !(self instanceof Permutation) ) return new Permutation(n);
        CombinatorialIterator.call(self, n);
    }
    
    ,__static__: {
         count: factorial
        // http://ldc.usb.ve/~bonet/reports/AAAI08-ws10-ranking.pdf
        // O(n log n) uniform lexicographic ranking.
        ,index: function( perm, n ) {
            var index = 0, i, j, node, ctr,
                k = ceil(log2(n)), Tl = (1<<(1+k))-1, 
                T = new Array(Tl), twok = 1<<k;
            for(i=0; i<Tl; i++) T[i] = 0;
            for(i=0; i<n; i++)
            {
                ctr = perm[i];
                node = twok + ctr;
                for(j=0; j<k; j++)
                {
                    if ( node&1 ) ctr = ctr - T[(node >>> 1) << 1];
                    T[node]++; node >>>= 1;
                }
                T[node]++;
                index = index * (n - i) + ctr;
            }
            return index;
        }
        // http://ldc.usb.ve/~bonet/reports/AAAI08-ws10-ranking.pdf
        // O(n log n) uniform lexicographic unranking.
        ,item: function( index, n, total ) {
            total = total || factorial(n);
            var klass = this, 
                perm, fn, i, j, i2, 
                digit, node, rem, k, Tl, T, twok;
            
            if ( 0 === index ) return klass.first( n );
            else if ( total === index+1 ) return klass.last( n );
                
            perm = new Array(n); fn = total/n;
            k = ceil(log2(n)); Tl = (1<<(1+k))-1;
            T = new Array(Tl); twok = 1<<k;
            
            for (i=0; i<=k; i++)
                for (j=1,i2=1<<i; j<=i2; j++) 
                    T[i2-1+j] = 1 << (k - i);
            
            rem = n-1;
            for (i=0; i<n; i++)
            {
                digit = ~~(index/fn); 
                node = 1;
                for (j=0; j<k; j++)
                {
                    T[node]--; node <<= 1;
                    if ( digit >= T[node] )
                    {
                        digit -= T[node];
                        node++;
                    }
                }
                T[node] = 0;
                perm[i] = node - twok;
                if ( rem )
                {
                    index %= fn; 
                    fn /= rem; 
                    rem--;
                }
            }
            return perm;
        }
        ,first: function( n ) {
            var i, perm = new Array(n);
            for(i=0; i<n; i++) perm[i] = i;
            return perm;
        }
        ,last: function( n ) {
            var i, perm = new Array(n);
            for(i=0; i<n; i++) perm[i] = n-1-i;
            return perm;
        }
        // http://en.wikipedia.org/wiki/Permutation#Systematic_generation_of_all_permutations
        ,adjacent: function( offset, item, n ) {
            if ( item )
            {
                var k, kl, l, r, s, next = item.slice( );
                
                if ( -1 === offset )
                {
                    //Find the largest index k such that a[k] > a[k + 1].
                    k = n-2;
                    while (k>=0 && next[k]<=next[k+1]) k--;
                    // If no such index exists, the permutation is the last permutation.
                    if ( k >=0 ) 
                    {
                        //Find the largest index kl greater than k such that a[k] > a[kl].
                        kl = n-1;
                        while (kl>k && next[k]<=next[kl]) kl--;
                        //Swap the value of a[k] with that of a[l].
                        s = next[k]; next[k] = next[kl]; next[kl] = s;
                        //Reverse the sequence from a[k + 1] up to and including the final element a[n].
                        l = k+1; r = n-1;
                        while (l < r) {s = next[l]; next[l++] = next[r]; next[r--] = s;}
                    }
                    else
                    {
                        next = null;
                    }
                }
                else //if ( 1 === offset )
                {
                    //Find the largest index k such that a[k] < a[k + 1].
                    k = n-2;
                    while (k>=0 && next[k]>=next[k+1]) k--;
                    // If no such index exists, the permutation is the last permutation.
                    if ( k >=0 ) 
                    {
                        //Find the largest index kl greater than k such that a[k] < a[kl].
                        kl = n-1;
                        while (kl>k && next[k]>=next[kl]) kl--;
                        //Swap the value of a[k] with that of a[l].
                        s = next[k]; next[k] = next[kl]; next[kl] = s;
                        //Reverse the sequence from a[k + 1] up to and including the final element a[n].
                        l = k+1; r = n-1;
                        while (l < r) {s = next[l]; next[l++] = next[r]; next[r--] = s;}
                    }
                    else
                    {
                        next = null;
                    }
                }
                return next;
            }
            return null;
        }
        ,rand: function( n ) { 
            var perm = new Array(n), i;
            for (i=0; i<n; i++) perm[i] = i;
            return shuffle( perm, false, false );
        }
        // http://stackoverflow.com/questions/30694811/permutations-sampling-by-probability-matrix/30695163#30695163
        ,fromStochasticMatrix: function( P, n, C ) {
            var permutation = new Array(n), 
                used = new Array(n), zeros,
                i, j, dice, pi, ci, cumul, N = 0, 
                singly_stochastic, doubly_stochastic = false;
            for (i=0; i<n; i++) used[i] = 0;
            // doubly-stochastic
            if ( C )
            {
                doubly_stochastic = true;
                // init counters
                if ( !C.length )
                {
                    C.N = 0;
                    zeros = new Array(n);
                    for (i=0; i<n; i++) zeros[i] = 0;
                    for (i=0; i<n; i++) C.push( zeros.slice() );
                }
                N = ++C.N;
            }
            singly_stochastic = !doubly_stochastic;
            i = 0;
            // while permutation places not filled
            while( i < n )
            {
                dice = Abacus.rnd( );
                cumul = 0; pi = P[i];
                if ( doubly_stochastic ) ci = C[i];
                // select an item to fill the i-th place of permutation
                // according to stochastic matrix P
                for (j=0; j<n; j++)
                {
                    // item j selected
                    if ( cumul < dice && dice <= cumul+pi[j] )
                    {
                        // if not already used AND
                        // simulation matrix is singly stochastic OR
                        // j-item has not been used in i-place enough according to doubly-stochastic matrix
                        if ( 0 === used[j] && 
                            ( singly_stochastic || ci[j] < N*pi[j] )
                        )
                        {
                            // then use j-item in i-place of permutation
                            used[j] = 1;
                            permutation[i] = j;
                            // increase counter of j-item used in i-place
                            if ( doubly_stochastic ) ci[j]++;
                            // next permutation place
                            i++;
                        }
                        // either item found so break
                        // or selected item not matches, so break for new dice simulation
                        break;
                    }
                    cumul += pi[j];
                }
            }
            return permutation;
        }
        ,inverse: function( perm, n ) {
            n = n || perm.length;
            var i, iperm = new Array(n);
            for (i=0; i<n; i++) iperm[perm[i]] = i;
            return iperm;
        }
        ,compose: function( /* permutations */ ) {
            var perms = arguments, nperms = perms.length, 
                composed = nperms ? perms[0] : [],
                n = composed.length, i, p, comp;
            for (p=1; p<nperms; p++)
            {
                comp = composed.slice( );
                for (i=0; i<n; i++) composed[ i ] = comp[ perms[ p ][ i ] ];
            }
            return composed;
        }
        ,permute: function( arr, perm, copied ) {
            var i, l = arr.length, p, a;
            if ( true === copied )
            {
                p = new Array(l);
                a = arr;
            }
            else
            {
                p = arr;
                a = arr.slice();
            }
            for (i=0; i<l; i++) p[i] = a[perm[i]];
            return p;
        }
        ,reassign: function( arr, perm ) {
            var i, l = arr.length, reassigned = new Array(l);
            for (i=0; i<l; i++) reassigned[i] = perm[arr[i]];
            return reassigned;
        }
        ,shuffle: shuffle
        ,xshuffle: xshuffle
        ,toCycles: function( perm, n, strict ) {
            n = n || perm.length;
            var i, cycles = [], current, cycle, 
                min_cycle = true === strict ? 1 : 0,
                visited = new Array( n ),
                unvisited = new Array(n);
            for(i=0; i<n; i++) 
            {
                unvisited[ i ] = i;
                visited[ i ] = 0;
            }
            cycle = [current = unvisited.shift( )]; visited[ current ] = 1;
            while ( unvisited.length ) 
            {
                current = perm[ current ];
                if ( visited[current] )
                {
                    if ( cycle.length > min_cycle ) cycles.push( cycle );
                    cycle = [ ];
                    while ( unvisited.length && visited[current=unvisited.shift()] ) ;
                }
                if ( !visited[current] )
                {
                    cycle.push( current );
                    visited[ current ] = 1; 
                }
            }
            if ( cycle.length > min_cycle ) cycles.push( cycle );
            return cycles;
        }
        ,fromCycles: function( cycles, n ) {
            var perm = new Array(n), c, l = cycles.length, i, cl, cycle;
            for (i=0; i<n; i++) perm[ i ] = i;
            for (c=0; c<l; c++)
            {
                cycle = cycles[c]; cl = cycle.length;
                if ( cl < 2 ) continue;
                for (i=0; i<cl-1; i++) perm[cycle[i]] = cycle[i+1];
                perm[cycle[cl-1]] = cycle[0];
            }
            return perm;
        }
        ,toSwaps: function( perm, n ) {
            n = n || perm.length;
            var i, l, swaps = [], cycle,
                cycles = Permutation.toCycles( perm, n, true );
            for (i=0,l=cycles.length; i<l; i++)
            {
                cycle = cycles[i];
                swaps = swaps.concat( cycle2swaps( cycle ) );
            }
            return swaps;
        }
        ,fromSwaps: function( swaps, n ) {
            var i, l = swaps.length, perm = new Array(n), swap, temp;
            for (i=0; i<n; i++) perm[i] = i;
            for (i=0; i<l; i++)
            {
                swap = swaps[i];
                // swap
                temp = perm[swap[0]]; 
                perm[swap[0]] = perm[swap[1]];
                perm[swap[1]] = temp;
            }
            return perm;
        }
        ,toMatrix: function( perm, n, bycolumns ) {
            var mat = new Array(n), i, j;
            bycolumns = true === bycolumns;
            for (i=0; i<n; i++)
            {
                mat[i] = new Array(n);
                for (j=0; j<n; j++) mat[i][j] = 0;
            }
            for (i=0; i<n; i++)
            {
                if ( bycolumns ) mat[perm[i]][i] = 1;
                else mat[i][perm[i]] = 1;
            }
            return mat;
        }
        ,fromMatrix: function( mat, n, bycolumns ) {
            var perm = new Array(n), i, j;
            bycolumns = true === bycolumns;
            for (i=0; i<n; i++)
            {
                for (j=0; j<n; j++)
                {
                    if ( mat[i][j] ) 
                    {
                        if ( bycolumns ) perm[j] = i;
                        else perm[i] = j;
                    }
                }
            }
            return perm;
        }
        // http://maths-people.anu.edu.au/~brent/pd/Arndt-thesis.pdf
        ,isConnected: function( perm, n ) {
            var m = -Infinity, i;
            n = n || perm.length;
            for (i=0; i<n-1; i++) // for all proper prefixes, do:
            {
                if ( perm[i] > m ) m = perm[i]; // update max.
                if ( m <= i ) return false; // prefix mapped to itself, P not connected.
            }
            return true; // P is connected.
        }
    }
    
    ,next: CombinatorialIterator[PROTO].adjacentNext
    ,prev: CombinatorialIterator[PROTO].adjacentPrev
});

// http://en.wikipedia.org/wiki/Derangement
// http://arxiv.org/pdf/1009.4214.pdf
// permutation with no fixed points
Derangement = Abacus.Derangement = Class(CombinatorialIterator, {
    
    // extends and implements CombinatorialIterator
    constructor: function Derangement( n ) {
        var self = this;
        if ( !(self instanceof Derangement) ) return new Derangement(n);
        CombinatorialIterator.call(self, n);
    }
    
    ,__static__: {
         count: subfactorial
        ,index: CombinatorialIterator.index
        ,item: CombinatorialIterator.item
        ,first: CombinatorialIterator.first
        ,last: CombinatorialIterator.last
        // http://www.cs.upc.edu/~conrado/research/talks/analco08.pdf
        ,rand: function( n ) {
            var dern = new Array(n),
                mark = new Array(n),
                i, j, u, m = n, swap, 
                Fn = factorial(m), 
                Du = floor(Fn+1/EULER), 
                Du2 = floor((Fn/(m*(m-1))+1)/EULER);
            for (i=0; i<n; i++) 
            {
                dern[ i ] = i;
                mark[ i ] = false;
            }
            i = n-1; u = n;
            while ( u >= 2 )
            {
                if ( !mark[i] )
                {
                    do{ j = Abacus.rint(0, i-1); }while( mark[j] );
                    swap = dern[i]; dern[i] = dern[j]; dern[j] = swap;
                    if ( Abacus.rnd() < (u-1)*Du2/Du )
                    {
                        mark[ j ] = true; 
                        u--; m--;
                        Fn /= m;
                        Du = floor(Fn+1/EULER), 
                        Du2 = floor((Fn/(m*(m-1))+1)/EULER);
                    }
                    u--; m--;
                    Fn /= m;
                    Du = floor(Fn+1/EULER), 
                    Du2 = floor((Fn/(m*(m-1))+1)/EULER);
                }
                i--;
            }
            return dern;
        }
        ,fromStochasticMatrix: CombinatorialIterator.fromStochasticMatrix
        ,adjacent: CombinatorialIterator.adjacent
    }
});

// https://en.wikipedia.org/wiki/Combinations
Combination = Abacus.Combination = Class(CombinatorialIterator, {
    
    // extends and implements CombinatorialIterator
    constructor: function Combination( n, k ) {
        var self = this;
        if ( !(self instanceof Combination) ) return new Combination(n, k);
        CombinatorialIterator.call(self, [n, k]);
    }
    
    ,__static__: {
         count: function( n ) {
             return binomial(n[0], n[1]);
         }
        ,index: function( item, n, total ) {
            var index = 0, i, c, j, k, binom;
            k = n[1]; n = n[0]; binom = total ? total : binomial(n, k);
            for (i=1; i<=k; i++)
            {
                // adjust the order to match MSB to LSB 
                // reverse of wikipedia article http://en.wikipedia.org/wiki/Combinatorial_number_system
                c = n-1-item[i-1]; j = k+1-i;
                index += j<=c?binomial(c, j):0;
            }
            return binom-1-index;
        }
        // http://riad.pk.edu.pl/~zk/pubs/95-1-006.pdf
        ,item: function( index, n, total ) {
            var klass = this, item, binom, k, m, t, p;
            total = total || binomial(n[0], n[1]);
            
            if ( 0 === index ) return klass.first( n );
            else if ( total === index+1 ) return klass.last( n );
            
            k = n[1]; n = n[0]; item = new Array(k); binom = total;
            // adjust the order to match MSB to LSB 
            index = binom-1-index;
            binom = (n-k)*binom/n; 
            t = n-k+1; m = k; p = n-1;
            do
            {
                if ( binom <= index )
                {
                    item[k-m] = n-t-m+1;
                    if ( binom > 0 )
                    {
                        index -= binom; 
                        binom = m*binom/p;
                    }
                    m--; p--;
                }
                else
                {
                    binom = (p-m)*binom/p; 
                    t--; p--;
                }
            }
            while( m > 0 );
            return item;
        }
        ,first: function( n ) {
            var i, k = n[1], comb = new Array(k);
            for (i=0; i<k; i++) comb[i] = i;
            return comb;
        }
        ,last: function( n ) {
            var i, k = n[1], comb = new Array(k);
            n = n[0];
            for (i=0; i<k; i++) comb[k-1-i] = n-1-i;
            return comb;
        }
        ,adjacent: function( offset, item, n ) {
            if ( item )
            {
                var k, i, index, limit, curr, next = item.slice();
                k = n[1]; n = n[0];
                
                if ( -1 === offset )
                {
                    // compute prev indexes
                    // find index to move
                    i = k-1;  index = -1;
                    while ( i > 0 )
                    {
                        if ( next[i]>next[i-1]+1 ) { index = i; break; }
                        i--;
                    }
                    if (-1 === index && 0 < next[0]) index = 0;
                    // adjust next indexes after the moved index
                    if ( -1 < index )
                    {
                        curr = n;
                        for (i=k-1; i>index; i--) next[i] = --curr;
                        next[index]--;
                    }
                    else 
                    { 
                        next = null; 
                    }
                }
                else //if ( 1 === offset )
                {
                    // compute next indexes
                    // find index to move
                    i = k-1;  index = -1; limit = n-k;
                    while ( 0 <= i )
                    {
                        if ( next[i] < limit+i ) { index = i; break; }
                        i--;
                    }
                    // adjust next indexes after the moved index
                    if ( -1 < index )
                    {
                        curr = next[index];
                        for (i=index; i<k; i++) next[i] = ++curr;
                    }
                    else 
                    { 
                        next = null; 
                    }
                }
                return next;
            }
            return null;
        }
        ,rand: function( n ) {
            var combination, choices, chosen,
                k, i, index, selected, nc, kc;
            k = n[1]; n = n[0];
            if ( n === k ) 
            {
                // O(k), unbiased
                combination = new Array(k);
                for (index=0; index<k; index++) 
                    combination[ index ] = index;
            }
            else if ( 1 === k )
            {
                // O(k), unbiased
                combination = [Abacus.rint(0, n-1)];
            }
            else if ( n-1 === k )
            {
                // O(k), unbiased
                combination = new Array(k);
                selected = Abacus.rint(0, n-1); i = 0;
                for (index=0; index<k; index++) 
                {
                    if ( selected === index ) i = 1; 
                    combination[ index ] = i+index;
                }
            }
            else if ( n-k < k )
            {
                // O(n), unbiased
                combination = new Array(k);
                choices = new Array(n);
                chosen = new Array(n);
                for (index=0; index<n; index++) 
                {
                    choices[ index ] = index;
                    chosen[ index ] = 1;
                }
                kc = n-k; nc = n;
                // partial shuffling O(n-k) times
                for (i=0; i<kc; i++)
                { 
                    selected = Abacus.rint( 0, --nc );
                    index = choices[ selected ];
                    choices[ selected ] = choices[ nc ];
                    choices[ nc ] = index;
                    chosen[ index ] = 0;
                }
                for (i=0,index=0; index<n; index++)
                {
                    if ( chosen[ index ] ) 
                        combination[ i++ ] = index;
                }
            }
            else
            {
                // O(klogk), unbiased
                /*
                combination = new Array(k);
                combination[0] = Abacus.rint(0, --n);
                for (i=1; i<k; i++) combination[i] = Abacus.rint_exclude(0, n, combination, i);
                combination = combination.sort( numeric_asc );
                */
                
                // O(n), unbiased
                combination = new Array(k);
                choices = new Array(n);
                chosen = new Array(n);
                for (index=0; index<n; index++) 
                {
                    choices[ index ] = index;
                    chosen[ index ] = 0;
                }
                nc = n;
                // partial shuffling O(k) times
                for (i=0; i<k; i++)
                { 
                    selected = Abacus.rint( 0, --nc );
                    index = choices[ selected ];
                    choices[ selected ] = choices[ nc ];
                    choices[ nc ] = index;
                    chosen[ index ] = 1;
                }
                for (i=0,index=0; index<n; index++)
                {
                    if ( chosen[ index ] ) 
                        combination[ i++ ] = index;
                }
            }
            return combination;
        }
        ,fromStochasticMatrix: function( P, n ) {
            var combination, used, 
                k, i, j, dice, pi, cumul;
            k = n[1]; n = n[0];
            combination = new Array(k);
            used = new Array(n);
            for (i=0; i<n; i++) used[i] = 0;
            i = 0;
            while ( i < k )
            {
                dice = Abacus.rnd( );
                cumul = 0;
                pi = P[i];
                for (j=0; j<n; j++)
                {
                    if ( cumul < dice && dice <= cumul+pi[j] )
                    {
                        if ( 0 === used[j] )
                        {
                            used[j] = 1;
                            i++;
                        }
                        break;
                    }
                    cumul += pi[j];
                }
            }
            i = 0;
            for (j=0; j<n; j++)
            {
                if ( used[j] ) 
                    combination[i++] = j;
            }
            return combination;
        }
        ,complement: complement
        ,choose: function( arr, comb ) {
            var i, l = comb.length, chosen = new Array(l);
            for (i=0; i<l; i++) chosen[i] = arr[comb[i]];
            return chosen;
        }
        ,pick: random_pick
        ,toMatrix: function( comb, n, bycolumns ) {
            var mat, k, i, j;
            k = n[1]; n = n[0];
            mat = new Array(n);
            bycolumns = true === bycolumns;
            for (i=0; i<n; i++)
            {
                mat[i] = new Array(n);
                for (j=0; j<n; j++) mat[i][j] = 0;
            }
            for (i=0; i<k; i++)
            {
                if ( bycolumns ) mat[comb[i]][i] = 1;
                else mat[i][comb[i]] = 1;
            }
            return mat;
        }
        ,fromMatrix: function( mat, n, bycolumns ) {
            var comb, k, i, j;
            k = n[1]; n = n[0];
            comb = new Array(k);
            bycolumns = true === bycolumns;
            for (i=0; i<n; i++)
            {
                for (j=0; j<n; j++)
                {
                    if ( mat[i][j] ) 
                    {
                        if ( bycolumns && j < k ) comb[j] = i;
                        else if ( !bycolumns && i < k ) comb[i] = j;
                    }
                }
            }
            return comb;
        }
    }
    
    ,next: CombinatorialIterator[PROTO].adjacentNext
    ,prev: CombinatorialIterator[PROTO].adjacentPrev
});
// aliases
Combination.conjugate = Combination.complement;

CombinationRepeat = Abacus.CombinationRepeat = Class(CombinatorialIterator, {
    
    // extends and implements CombinatorialIterator
    constructor: function CombinationRepeat( n, k ) {
        var self = this;
        if ( !(self instanceof CombinationRepeat) ) return new CombinationRepeat(n, k);
        CombinatorialIterator.call(self, [n, k]);
    }
    
    ,__static__: {
         // http://en.wikipedia.org/wiki/Combination#Number_of_combinations_with_repetition
         count: function( n ) {
             return binomial(n[0]+n[1]-1,n[1]);
         }
        ,index: function( item, n, total ) {
            var index = 0, i, c, j, k, N, binom;
            k = n[1]; n = n[0];
            N = n+k-1;
            binom = total ? total : binomial(N, k);
            for (i=1; i<=k; i++)
            {
                // adjust the order to match MSB to LSB 
                // reverse of wikipedia article http://en.wikipedia.org/wiki/Combinatorial_number_system
                // http://riad.pk.edu.pl/~zk/pubs/95-1-006.pdf
                /*
                procedure CONJNDCF (k, K[k], L[k])
                1. for i=1 to k do
                1.1. L[i]:= K[i]-i+1;
                */
                c = N-1-item[i-1]-i+1; j = k+1-i;
                index += j<=c?binomial(c, j):0;
            }
            return binom-1-index;
        }
        // http://riad.pk.edu.pl/~zk/pubs/95-1-006.pdf
        ,item: function( index, n, total ) {
            var klass = this, item, binom, k, N, m, t, p;
            total = total || binomial(n[0]+n[1]-1,n[1]);
            
            if ( 0 === index ) return klass.first( n );
            else if ( total === index+1 ) return klass.last( n );
            
            k = n[1]; n = n[0];
            N = n+k-1;
            item = new Array(k);
            binom = total;
            index = binom-1-index;
            binom = (N-k)*binom/N; 
            t = N-k+1; m = k; p = N-1;
            do
            {
                if ( binom <= index )
                {
                    item[k-m] = N-t-k+1;
                    if ( binom > 0 )
                    {
                        index -= binom; 
                        binom *= m/p;
                    }
                    m--; p--;
                }
                else
                {
                    binom *= (p-m)/p; 
                    t--; p--;
                }
            }
            while( m > 0 );
            return item;
        }
        ,first: function( n ) {
            var i, k = n[1], comb = new Array(k);
            for (i=0; i<k; i++) comb[i] = 0;
            return comb;
        }
        ,last: function( n ) {
            var i, k = n[1], comb = new Array(k);
            n = n[0]-1;
            for (i=0; i<k; i++) comb[i] = n;
            return comb;
        }
        ,adjacent: function( offset, item, n ) {
            if ( item )
            {
                var k, i, index, limit, curr, next = item.slice();
                k = n[1]; n = n[0];
                
                if ( -1 === offset )
                {
                    // compute prev indexes
                    // find index to move
                    i = k-1;  index = -1;
                    while (0 < i)
                    {
                        if ( next[i] > next[i-1] ) { index=i; break; }
                        i--;
                    }
                    if (-1 === index && 0 < next[0]) index = 0;
                    // adjust next indexes after the moved index
                    if (-1 < index)
                    {
                        curr = n-1;
                        for (i=index+1; i<k; i++) next[i] = curr;
                        next[index]--;
                    }
                    else 
                    { 
                        next = null; 
                    }
                }
                else //if ( 1 === offset )
                {
                    // compute next indexes
                    // find index to move
                    i = k-1;  index = -1;
                    while (0 <= i)
                    {
                        if ( next[i] < n-1 ) {  index=i; break; }
                        i--;
                    }
                    // adjust next indexes after the moved index
                    if (-1 < index)
                    {
                        curr = next[index]+1;
                        for (i=index; i<k; i++) next[i] = curr;
                    }
                    else 
                    { 
                        next = null; 
                    }
                }
                return next;
            }
            return null;
        }
        ,rand: function( n ) {
            var combination, k, m, M, i;
            k = n[1]; n = n[0];
            combination = new Array(k);
            m = 0; M = n-1;
            // O(klogk)
            // make it unbiased
            for (i=0; i<k; i++) combination[ i ] = Abacus.rint( m, M );
            return combination.sort( numeric_asc );
        }
        ,fromStochasticMatrix: function( P, n ) {
            var combination, used, k, i, j, dice, pi, cumul;
            k = n[1]; n = n[0];
            combination = new Array(k);
            used = new Array(n);
            for (i=0; i<n; i++) used[i] = 0;
            i = 0;
            while ( i < k )
            {
                dice = Abacus.rnd( );
                cumul = 0;
                pi = P[i];
                for (j=0; j<n; j++)
                {
                    if ( cumul < dice && dice <= cumul+pi[j] )
                    {
                        used[j]++;
                        i++;
                        break;
                    }
                    cumul += pi[j];
                }
            }
            i = 0;
            for (j=0; j<n; j++)
            {
                while ( used[j]-- ) 
                    combination[i++] = j;
            }
            return combination;
        }
    }
    
    ,next: CombinatorialIterator[PROTO].adjacentNext
    ,prev: CombinatorialIterator[PROTO].adjacentPrev
});

// https://en.wikipedia.org/wiki/Partitions
Partition = Abacus.Partition = Class(CombinatorialIterator, {
    
    // extends and implements CombinatorialIterator
    constructor: function Partition( n ) {
        var self = this;
        if ( !(self instanceof Partition) ) return new Partition(n);
        CombinatorialIterator.call(self, n);
    }
    
    ,__static__: {
         count: function( n ) {
             var p = n > 1 ? 2 : 1, k, m;
             for (k=2; k<n; k++) 
                 for (m=n-k+1; m>=1; m--)
                    p += partitions(n, k, m);
             return p;
         }
        ,index: CombinatorialIterator.index
        ,item: CombinatorialIterator.item
        ,first: function( n ) {
            var i, item = new Array(n); 
            for (i=0; i<n; i++) item[i] = 1;
            return item;
        }
        ,last: function( n ) {
            return [ n ]; 
        }
        ,adjacent: function( offset, item, n ) {
            if ( item )
            {
                var i, c, p1, p2, summa, rem, 
                    next = item.slice( );
                
                if ( -1 === offset )
                {
                    // compute prev partition
                    if ( next[0] > 1 )
                    {
                        c = next.length;
                        // break into a partition with last part reduced by 1 from previous partition series
                        i = c-1;
                        while (i>=0 && 1 === next[i]) i--;
                        p1 = next[i]-1;
                        next = next.slice(0, i+1);
                        next[ i ] = p1;
                        summa = sum( next );
                        rem = n-summa;
                        while ( rem > 0 )
                        {
                            p2 = rem;
                            if ( p2 > p1 ) 
                            { 
                                p2 = p1;  
                                next.push(p2); 
                            }
                            else 
                            { 
                                next.push(rem); 
                            }
                            rem -= p2;
                        }
                    }
                    // if partition is all ones (so first element is also one) it is the final partition
                    else 
                    { 
                        next = null; 
                    }
                }
                else //if ( 1 === offset )
                {
                    // compute next partition
                    if ( next[0] < n )
                    {
                        c = next.length;
                        i = c-1; if (i>0) i--;
                        while (i>0 && next[i] === next[i-1]) i--;
                        next[i]++;
                        next = next.slice( 0, i+1 );
                        summa = sum( next );
                        rem = n-summa;
                        while ( rem > 0 )
                        {
                            next.push(1);
                            rem--;
                        }
                    }
                    // if partition is the number itself it is the final partition
                    else 
                    { 
                        next = null; 
                    }
                }
                return next;
            }
            return null;
        }
        ,rand: function( n ) {
            var i, k, summa, p, partition, parts, index;
            if ( 0 === n || 1 === n )
            {
                partition = [n];
            }
            else
            {
                summa = 0; p = new Array(n); parts = new Array(n);
                for (i=0; i<n; i++)
                {
                    p[i] = 0;
                    parts[i] = i+1;
                }
                // O(n) AND unbiased
                while ( summa < n )
                {
                    // this can be biased for default PRNGs (e.g modulo-based)
                    // because, for example, a partition of 1,1,..,1,1 s
                    // becomes increasingly improbable to be selected
                    // a solution is to shuffle the remaining selections, to compensate
                    // but this introduces computational issues greater than O(n)
                    k = Abacus.rint(1, n-summa);
                    p[k-1]++; summa+=k;
                    // just one left
                    if ( summa+1 === n ) { p[0]++; summa++; }
                }
                if ( p[n-1] )
                {
                    partition = [n];
                }
                else
                {
                    partition = [];
                    for (i=n-2,k=n-1; i>=0; i--,k--)
                        while ( p[i]-- ) partition.push(k);
                }
            }
            return partition;
        }
        ,fromStochasticMatrix: function( P, n ) {
            var partition = [], used = new Array(n), 
                i, dice, cumul, summa, notfound;
            for (i=0; i<n; i++) used[i] = 0;
            summa = 0;
            while ( summa < n )
            {
                dice = Abacus.rnd( );
                cumul = 0;
                notfound = true;
                for (i=0; i<n; i++)
                {
                    if ( cumul < dice && dice <= cumul+P[i] )
                    {
                        if ( summa+i+1 <= n )
                        {
                            used[i]++;
                            summa += i+1;
                        }
                        notfound = false;
                        break;
                    }
                    cumul += P[i];
                }
                
                if ( notfound ) return [n]; // probabilities dont add up, return default partition
                
                if ( summa+1 === n ) // just one left
                {
                    used[0]++;
                    summa += 1;
                }
            }
            for (i=n-1; i>=0; i--)
            {
                while ( used[i]-- ) 
                    partition.push( i+1 );
            }
            return partition;
        }
        // http://www.artofproblemsolving.com/wiki/index.php/Partition_%28combinatorics%29
        // http://mathworld.wolfram.com/ConjugatePartition.html
        ,conjugate: function( partition ) {
            var l = partition.length, 
                n = partition[0], i, j, p,
                conjugate = new Array(n);
            for (i=0; i<n; i++) conjugate[ i ] = 1;
            for (j=1; j<l; j++)
            {
                i = 0; p = partition[j];
                while ( i < n && p > 0 )
                {
                    conjugate[i++]++;
                    p--;
                }
            }
            return conjugate;
        }
        ,pack: function( partition ) {
            var packed = [], i, l = partition.length, 
                last = partition[0], part = [last, 1];
            for (i=1; i<l; i++)
            {
                if ( last === partition[i] ) part[1]++;
                else
                {
                    packed.push(part);
                    last = partition[i];
                    part = [last, 1];
                }
            }
            packed.push(part);
            return packed;
        }
        ,unpack: function( packed ) {
            var partition = [], i, j, k, v, l = packed.length, cmp;
            for (i=0; i<l; i++)
            {
                cmp = packed[i];
                if (1 === cmp[1] ) partition.push(cmp[0]);
                else
                {
                    k = cmp[1]; v = cmp[0];
                    for(j=0; j<k; j++) partition.push(v);
                }
            }
            return partition;
        }
    }
    
    ,next: CombinatorialIterator[PROTO].adjacentNext
    ,prev: CombinatorialIterator[PROTO].adjacentPrev
});
// aliases
Partition.transpose = Partition.conjugate;

RestrictedPartition = Abacus.RestrictedPartition = Class(CombinatorialIterator, {
    
    // extends and implements CombinatorialIterator
    constructor: function RestrictedPartition( n, k, m ) {
        var self = this;
        if ( !(self instanceof RestrictedPartition) ) return new RestrictedPartition(n, k, m);
        CombinatorialIterator.call(self, [n, k, m]);
    }
    
    ,__static__: {
         count: function( n ) {
             return partitions( n[0], n[1], n[2] );
         }
        ,index: CombinatorialIterator.index
        ,item: CombinatorialIterator.item
        ,first: CombinatorialIterator.first
        ,last: CombinatorialIterator.last
        ,adjacent: CombinatorialIterator.adjacent
        ,rand: CombinatorialIterator.rand
        ,fromStochasticMatrix: CombinatorialIterator.fromStochasticMatrix
    }
});

// http://en.wikipedia.org/wiki/Power_set
PowerSet = Abacus.PowerSet = Class(CombinatorialIterator, {
    
    // extends and implements CombinatorialIterator
    constructor: function PowerSet( n ) {
        var self = this;
        if ( !(self instanceof PowerSet) ) return new PowerSet(n);
        CombinatorialIterator.call(self, n);
    }
    
    ,__static__: {
         count: pow2
        ,index: function( subset ) { 
            var index = 0, i = 0, l = subset.length;
            while ( i < l ) index += (1<<subset[i++])>>>0;
            return index;
        }
        ,item: function( index ) { 
            var subset = [], i = 0;
            while ( 0 !== index )
            {
                // loop unrolling
                if ( index&1 ) subset.unshift( i );
                if ( index&2 ) subset.unshift( i+1 );
                if ( index&4 ) subset.unshift( i+2 );
                if ( index&8 ) subset.unshift( i+3 );
                if ( index&16 ) subset.unshift( i+4 );
                if ( index&32 ) subset.unshift( i+5 );
                if ( index&64 ) subset.unshift( i+6 );
                if ( index&128 ) subset.unshift( i+7 );
                i+=8; index >>>= 8;
            }
            return subset;
        }
        ,first: function( n ) {
            return [];
        }
        ,last: function( n ) {
            var i, item = new Array( n ); 
            for (i=0; i<n; i++) item[ i ] = n-1-i;
            return item;
        }
        ,adjacent: CombinatorialIterator.adjacent
        ,rand: function( n, total ) {
            var klass = this, tot = total ? total : (1<<n);
            return klass.item( Abacus.rint(0, tot-1) );
        }
        ,fromStochasticMatrix: CombinatorialIterator.fromStochasticMatrix
    }
});

// 
// https://en.wikipedia.org/wiki/Outer_product
// https://en.wikipedia.org/wiki/Kronecker_product
// https://en.wikipedia.org/wiki/Tensor_product
// see also: http://www.inf.ethz.ch/personal/markusp/papers/perm.ps
Tensor = Abacus.Tensor = Class(CombinatorialIterator, {
    
    // extends and implements CombinatorialIterator
    constructor: function Tensor( /*dims here ..*/ ) {
        var self = this;
        if ( !(self instanceof Tensor) ) 
        {
            // http://stackoverflow.com/questions/1606797/use-of-apply-with-new-operator-is-this-possible
            //return new (bind.apply(Tensor, [null].concat(arguments)));
            self = new Tensor( );
            if ( arguments.length )
            {
                CombinatorialIterator.call(self, slice.call( arguments ));
            }
            else
            {
                self.n = [];
                self.$total = 0;
            }
            return self;
        }
        if ( arguments.length )
        {
            CombinatorialIterator.call(self, slice.call( arguments ));
        }
        else
        {
            self.n = [];
            self.$total = 0;
        }
    }
    
    ,__static__: {
         count: function( n ) {
             if ( !n || !n.length ) return 0;
             return product( n );
        }
        ,index: function( tensor, n ) { 
            var index, d = n, nd = d.length, i;
            if ( !nd ) return -1;
            for (index=0,i=0; i<nd; i++)
            {
                index = index*d[ i ] + tensor[ i ];
            }
            return index;
        }
        ,item: function( index, n ) { 
            var r, l, i, t, tensor,
                d = n, nd = d.length;
            
            if ( !nd ) return [ ];
            
            tensor = new Array( nd );
            for (r=index,i=nd-1; i>=0; i--)
            {
                l = d[ i ]; t = r % l; r = ~~(r / l);
                tensor[ i ] = t;
            }
            return tensor;
        }
        ,first: function( n ) {
            var i, nd = n.length, tensor = new Array( nd );
            for (i=0; i<nd; i++) tensor[ i ] = 0;
            return tensor;
        }
        ,last: function( n ) {
            var i, d = n, nd = d.length, tensor = new Array( nd );
            for (i=0; i<nd; i++) tensor[ i ] = d[ i ]-1;
            return tensor;
        }
        ,adjacent: CombinatorialIterator.adjacent
        ,rand: function( n, total ) {
            var klass = this, tot = total ? total : klass.count( n );
            return klass.item( Abacus.rint(0, tot-1), n );
        }
        ,fromStochasticMatrix: NotImplemented
        ,product: kronecker
        ,component: function( tensor, basev ) {
            var component = [ ], v = basev, nd = v.length, i, j, vi, vv, iv, vl;
            for (i=0; i<nd; i++)
            {
                vi = v[ i ]; iv = tensor[ i ]; vv = vi[ iv ];
                if ( vv instanceof Array )
                {
                    for (j=0,vl=vv.length; j<vl; j++)
                        component.push( vv[ j ] );
                }
                else
                {
                    component.push( vv );
                }
            }
            return component;
        }
    }
    
    ,stochastic: NotImplemented
    ,stochastic2: NotImplemented
});

// export it
return Abacus;
});
